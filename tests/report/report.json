{
  "stats": {
    "suites": 49,
    "tests": 66,
    "passes": 64,
    "pending": 0,
    "failures": 2,
    "start": "2023-01-01T20:03:39.612Z",
    "end": "2023-01-01T20:04:01.035Z",
    "duration": 21423,
    "testsRegistered": 77,
    "passPercent": 83.11688311688312,
    "pendingPercent": 0,
    "other": 4,
    "hasOther": true,
    "skipped": 11,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "61e3a507-df5a-4b25-ab81-cd7628e775ae",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "aa136d1b-0b5a-4f7a-8ff7-1ba62e7ec2f6",
          "title": "Selenium tests",
          "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testAdmin.js",
          "file": "\\tests\\testAdmin.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ab340173-5205-4f1b-8cbc-30199c52c09a",
              "title": "Home page",
              "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testAdmin.js",
              "file": "\\tests\\testAdmin.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: Start the test server in \"Home page\"",
                  "fullTitle": "Selenium tests Home page \"before all\" hook: Start the test server in \"Home page\"",
                  "timedOut": false,
                  "duration": 1147,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// HACK: Due to the way the server is made, there is no clean way to start a custom server for the tests.\n//       But what we can do is to start the server while overriding some values, and hope that it works.\nprocess.env.PORT = \"5555\";\n// Start server\nrequire(\"../index\");\n// Override server database with the test one.\ncopyFileSync(\"tests/db_original.json\", \"tests/db.json\");\nglobal.database = Database.load(\"tests/db.json\");\n// Wait, to make \"almost\" sure that the socket is bound.\nawait setTimeout(1000);",
                  "err": {},
                  "uuid": "b9dfb6cc-e189-411f-8b9c-3254cfffa61c",
                  "parentUUID": "ab340173-5205-4f1b-8cbc-30199c52c09a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Verify title home page",
                  "fullTitle": "Selenium tests Home page Verify title home page",
                  "timedOut": false,
                  "duration": 4521,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Open browser\n\t\t\tlet driver = await new Builder().forBrowser(TEST_BROWSER).build();\n\t\t\ttry {\n\t\t\t\t// Open the website\n\t\t\t\tawait driver.get(\"http://localhost:5555\");\n\t\t\t\t//get the title of the page\n\t\t\t\tlet titlePage = await driver\n\t\t\t\t\t.getTitle();\n\t\t\t\t// Assert that the title page's text is the same as the text \"Page de connexion\"\n\t\t\t\tassert.equal(titlePage, \"Page de connexion\");\n\t\t\t} finally {\n\t\t\t\t// Closes the browser\n\t\t\t\tawait driver.quit();\n\t\t\t}",
                  "err": {},
                  "uuid": "6e1b6d98-79a9-4863-a9a3-42481bf2707c",
                  "parentUUID": "ab340173-5205-4f1b-8cbc-30199c52c09a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Admin connection",
                  "fullTitle": "Selenium tests Home page Admin connection",
                  "timedOut": false,
                  "duration": 5962,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Open browser\nlet driver = await new Builder().forBrowser(TEST_BROWSER).build();\ntry {\n\t// Open the website\n\tawait driver.get(\"http://localhost:5555\");\n\t// Find the input matricule box\n\tawait driver\n\t\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t\t.sendKeys(\"OCB1234\", Key.RETURN);\n\t// Find the input password box\n\tawait driver\n\t\t.findElement(By.xpath(\"//*[@id=\\\"password\\\"]\"))\n\t\t.sendKeys(\"Azertyuiop1234\", Key.RETURN);\n\t// Find the input password box\n\tlet note = await driver\n\t\t.findElement(By.xpath(\"//html/body/main/h6\"))\n\t\t.getText();\n\t// Assert that the title page's text is the same as the text \"(ADMINISTRATEUR)\"\n\tassert.equal(note, \"(ADMINISTRATEUR)\");\n} finally {\n\t// Closes the browser\n\tawait driver.quit();\n}",
                  "err": {
                    "message": "NoSuchElementError: Unable to locate element: //html/body/main/h6",
                    "estack": "NoSuchElementError: Unable to locate element: //html/body/main/h6\n    at Object.throwDecodedError (node_modules\\selenium-webdriver\\lib\\error.js:524:15)\n    at parseHttpResponse (node_modules\\selenium-webdriver\\lib\\http.js:587:13)\n    at Executor.execute (node_modules\\selenium-webdriver\\lib\\http.js:515:28)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async Driver.execute (node_modules\\selenium-webdriver\\lib\\webdriver.js:741:17)\n    at async toWireValue (node_modules\\selenium-webdriver\\lib\\webdriver.js:143:15)\n    at async D:\\Travail\\Projets\\genie_log\\node_modules\\selenium-webdriver\\lib\\webdriver.js:193:16\n    at async forEachKey (node_modules\\selenium-webdriver\\lib\\webdriver.js:187:9)\n    at async convertKeys (node_modules\\selenium-webdriver\\lib\\webdriver.js:192:3)\n    at async Driver.execute (node_modules\\selenium-webdriver\\lib\\webdriver.js:739:22)\n    at async Context.<anonymous> (tests\\testAdmin.js:69:16)",
                    "diff": null
                  },
                  "uuid": "3ae2bf2e-e067-4d1e-b18d-7677398a1fc1",
                  "parentUUID": "ab340173-5205-4f1b-8cbc-30199c52c09a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Simple user connection",
                  "fullTitle": "Selenium tests Home page Simple user connection",
                  "timedOut": false,
                  "duration": 4235,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Open browser\nlet driver = await new Builder().forBrowser(TEST_BROWSER).build();\ntry {\n\t// Open the website\n\tawait driver.get(\"http://localhost:5555\");\n\t// Find the input matricule box\n\tawait driver\n\t\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t\t.sendKeys(\"JDZ5391\", Key.RETURN);\n\t// Find the input password box\n\tawait driver\n\t\t.findElement(By.xpath(\"//*[@id=\\\"password\\\"]\"))\n\t\t.sendKeys(\"Azertyuiop1234\", Key.RETURN);\n\t// Find the input password box\n\tlet note = await driver\n\t\t.findElement(By.xpath(\"//html/body/main/h6\"))\n\t\t.getText();\n\t// Assert that the title page's text is the same as the text \"(NON ADMINISTRATEUR)\"\n\tassert.equal(note, \"(NON ADMINISTRATEUR)\");\n} finally {\n\t// Closes the browser\n\tawait driver.quit();\n}",
                  "err": {
                    "message": "NoSuchElementError: Unable to locate element: //html/body/main/h6",
                    "estack": "NoSuchElementError: Unable to locate element: //html/body/main/h6\n    at Object.throwDecodedError (node_modules\\selenium-webdriver\\lib\\error.js:524:15)\n    at parseHttpResponse (node_modules\\selenium-webdriver\\lib\\http.js:587:13)\n    at Executor.execute (node_modules\\selenium-webdriver\\lib\\http.js:515:28)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async Driver.execute (node_modules\\selenium-webdriver\\lib\\webdriver.js:741:17)\n    at async toWireValue (node_modules\\selenium-webdriver\\lib\\webdriver.js:143:15)\n    at async D:\\Travail\\Projets\\genie_log\\node_modules\\selenium-webdriver\\lib\\webdriver.js:193:16\n    at async forEachKey (node_modules\\selenium-webdriver\\lib\\webdriver.js:187:9)\n    at async convertKeys (node_modules\\selenium-webdriver\\lib\\webdriver.js:192:3)\n    at async Driver.execute (node_modules\\selenium-webdriver\\lib\\webdriver.js:739:22)\n    at async Context.<anonymous> (tests\\testAdmin.js:100:16)",
                    "diff": null
                  },
                  "uuid": "9614e733-9eec-4e89-82fb-333b2d924fd2",
                  "parentUUID": "ab340173-5205-4f1b-8cbc-30199c52c09a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e1b6d98-79a9-4863-a9a3-42481bf2707c"
              ],
              "failures": [
                "3ae2bf2e-e067-4d1e-b18d-7677398a1fc1",
                "9614e733-9eec-4e89-82fb-333b2d924fd2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 14718,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6e1d0278-8f34-44af-bdb2-4a844e4407d7",
              "title": "Admin home page",
              "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testAdmin.js",
              "file": "\\tests\\testAdmin.js",
              "beforeHooks": [],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"Admin home page\"",
                  "fullTitle": "Selenium tests Admin home page \"after all\" hook in \"Admin home page\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Make sure that the server doesn't outlive tests.\nglobal.serverHandle.close();",
                  "err": {},
                  "uuid": "a4c126ec-5963-46a2-974d-d8a13f129011",
                  "parentUUID": "6e1d0278-8f34-44af-bdb2-4a844e4407d7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [],
              "suites": [
                {
                  "uuid": "cd5c19e6-ff03-49fe-bce5-a78bcb735da5",
                  "title": "Employees",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testAdmin.js",
                  "file": "\\tests\\testAdmin.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook for \"Number of employees\"",
                      "fullTitle": "Selenium tests Admin home page Employees \"before each\" hook for \"Number of employees\"",
                      "timedOut": true,
                      "duration": 2548,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "// Open browser\ndriver = await new Builder().forBrowser(TEST_BROWSER).build();\n// Open the website\nawait driver.get(\"http://localhost:5555\");\n// Find the input matricule box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t.sendKeys(\"OCB1234\", Key.RETURN);\n// Find the input password box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"password\\\"]\"))\n\t.sendKeys(\"Azertyuiop1234\", Key.RETURN);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);",
                      "err": {
                        "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\Travail\\Projets\\genie_log\\tests\\testAdmin.js)",
                        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\Travail\\Projets\\genie_log\\tests\\testAdmin.js)\n    at listOnTimeout (node:internal/timers:557:17)\n    at processTimers (node:internal/timers:500:7)",
                        "diff": null
                      },
                      "uuid": "f93ce79d-31fd-4ef7-b529-55f803b44009",
                      "parentUUID": "cd5c19e6-ff03-49fe-bce5-a78bcb735da5",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [
                    {
                      "title": "\"after each\" hook for \"Number of employees\"",
                      "fullTitle": "Selenium tests Admin home page Employees \"after each\" hook for \"Number of employees\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "await driver.quit();",
                      "err": {
                        "message": "TypeError: Cannot read properties of undefined (reading 'quit')",
                        "estack": "TypeError: Cannot read properties of undefined (reading 'quit')\n    at Context.<anonymous> (tests\\testAdmin.js:140:18)\n    at processImmediate (node:internal/timers:464:21)",
                        "diff": null
                      },
                      "uuid": "db52dfa7-ad32-4a79-bcbb-eba0d5bf21c2",
                      "parentUUID": "cd5c19e6-ff03-49fe-bce5-a78bcb735da5",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "tests": [
                    {
                      "title": "Number of employees",
                      "fullTitle": "Selenium tests Admin home page Employees Number of employees",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Count employees\nlet count = await driver\n\t\t\t\t\t.findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n\t\t\t\t\t.then(elements => elements.length);\n\n\t\t\t\t// Assert that the number of employees is equal to 3.\n\t\t\t\tassert.equal(count, 3);",
                      "err": {},
                      "uuid": "c20e488d-d679-4ab0-a011-171d834c66b4",
                      "parentUUID": "cd5c19e6-ff03-49fe-bce5-a78bcb735da5",
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Add a new employee",
                      "fullTitle": "Selenium tests Admin home page Employees Add a new employee",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Go to create a new employee page\nawait driver\n\t.findElement(By.xpath(\"//main/section/menu/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Find the input name box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"name\\\"]\"))\n\t.sendKeys(\"Nicolas\", Key.RETURN);\n// Find the input surname box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"surname\\\"]\"))\n\t.sendKeys(\"Machin\", Key.RETURN);\n// Find the input email box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"email\\\"]\"))\n\t.sendKeys(\"nicole.machin@mail.com\", Key.RETURN);\n// Find the input matricule box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t.sendKeys(\"POIU426\", Key.RETURN);\n// Find the input password box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"password\\\"]\"))\n\t.sendKeys(\"Azertyuiop1234\", Key.RETURN);\n//Add a new employee\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"save\\\"]\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                // Count the number of employees\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 4 employees\n                assert.equal(count, 4);",
                      "err": {},
                      "uuid": "3321374c-74c8-43a2-80e7-c4a1ff97ff93",
                      "parentUUID": "cd5c19e6-ff03-49fe-bce5-a78bcb735da5",
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Add an admin employee",
                      "fullTitle": "Selenium tests Admin home page Employees Add an admin employee",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Go to create a new employee page\nawait driver\n\t.findElement(By.xpath(\"//main/section/menu/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Find the input name box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"name\\\"]\"))\n\t.sendKeys(\"Patrice\", Key.RETURN);\n// Find the input surname box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"surname\\\"]\"))\n\t.sendKeys(\"Truc\", Key.RETURN);\n// Find the input email box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"email\\\"]\"))\n\t.sendKeys(\"patrice.truc@mail.com\", Key.RETURN);\n// Find the input matricule box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t.sendKeys(\"PATU653\", Key.RETURN);\n// Find the input password box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"password\\\"]\"))\n\t.sendKeys(\"Azertyuiop1234\", Key.RETURN);\n// Find the input password box\nawait driver\n\t.findElement(By.xpath(\"//label[text()='Rôle sur la plateforme']\")).click();\n//Add a new employee\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"save\\\"]\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                // Count the number of employees\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 5 employees\n                assert.equal(count, 5);",
                      "err": {},
                      "uuid": "89dc2e23-8953-462d-8da8-7d547dd5cf4b",
                      "parentUUID": "cd5c19e6-ff03-49fe-bce5-a78bcb735da5",
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Modify an employee",
                      "fullTitle": "Selenium tests Admin home page Employees Modify an employee",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Click on the employee to modify\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on modify button\nawait driver\n\t.findElement(By.xpath(\"//main/section/section/div/section/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n//Find the input matricule box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t.clear();\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t.sendKeys(\"NEW6352\", Key.RETURN);\n//Modify the new employee\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"save\\\"]\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Get the text content of the employee's \"matricule\"\nlet text = await driver\n\t.findElement(By.xpath(\"//html/body/main/section/section/div/ul/li[3]/p\"))\n\t.getText();\n// Assert that the title page's text is the same as the text \"NEW6352\"\nassert.equal(text, \"NEW6352\");",
                      "err": {},
                      "uuid": "2f879c21-4c6c-4474-bc26-835fd1989dbd",
                      "parentUUID": "cd5c19e6-ff03-49fe-bce5-a78bcb735da5",
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Modify an employee --> employee is now an admin",
                      "fullTitle": "Selenium tests Admin home page Employees Modify an employee --> employee is now an admin",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Click on the employee to modify\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on modify button\nawait driver\n\t.findElement(By.xpath(\"//main/section/section/div/section/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n//Change the role of the employee to admin\nawait driver\n\t.findElement(By.xpath(\"//label[text()='Rôle sur la plateforme']\")).click();\n//Modify the new employee\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"save\\\"]\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Get the text -- should be equal to 'administrateur'\nlet text = await driver\n\t.findElement(By.xpath(\"//html/body/main/section/section/div/ul/li[2]/p\"))\n\t.getText();\n// Assert that the title page's text is the same as the text \"Administrateur\"\nassert.equal(text, \"Administrateur\");",
                      "err": {},
                      "uuid": "51c4dab8-a889-48c7-b0ec-b099cb2ce587",
                      "parentUUID": "cd5c19e6-ff03-49fe-bce5-a78bcb735da5",
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Deleting an employee",
                      "fullTitle": "Selenium tests Admin home page Employees Deleting an employee",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Click on the employee to delete\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on delete button\nawait driver\n\t.findElement(By.xpath(\"//main/section/section/div/section/ul/li[3]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on confirm button\nawait driver\n\t.findElement(By.xpath(\"//body/div/div/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                // Count the number of employees\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 4 employees\n                assert.equal(count, 4);",
                      "err": {},
                      "uuid": "6ca14c42-fe36-4408-95e6-7305c49c076b",
                      "parentUUID": "cd5c19e6-ff03-49fe-bce5-a78bcb735da5",
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Deleting admin employee",
                      "fullTitle": "Selenium tests Admin home page Employees Deleting admin employee",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Click on the employee to delete\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on delete button\nawait driver\n\t.findElement(By.xpath(\"//main/section/section/div/section/ul/li[3]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on confirm button\nawait driver\n\t.findElement(By.xpath(\"//body/div/div/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                // Count the number of employees\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 3 employees\n                assert.equal(count, 3);",
                      "err": {},
                      "uuid": "e39d984f-fa90-4eaf-bb5d-ca21cd0398fc",
                      "parentUUID": "cd5c19e6-ff03-49fe-bce5-a78bcb735da5",
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Deleting last admin employee",
                      "fullTitle": "Selenium tests Admin home page Employees Deleting last admin employee",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Click on the employee to delete\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[2]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on delete button\nawait driver\n\t.findElement(By.xpath(\"//main/section/section/div/section/ul/li[3]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on confirm button\nawait driver\n\t.findElement(By.xpath(\"//body/div/div/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                // Count the number of employees\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 3 employees -- Since it's the last admin, it should not be deleted, so we should still have 3 employees as before\n                assert.equal(count, 3);",
                      "err": {},
                      "uuid": "5f5ac484-d92f-424e-b0b3-1f60cd1f46c1",
                      "parentUUID": "cd5c19e6-ff03-49fe-bce5-a78bcb735da5",
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "c20e488d-d679-4ab0-a011-171d834c66b4",
                    "3321374c-74c8-43a2-80e7-c4a1ff97ff93",
                    "89dc2e23-8953-462d-8da8-7d547dd5cf4b",
                    "2f879c21-4c6c-4474-bc26-835fd1989dbd",
                    "51c4dab8-a889-48c7-b0ec-b099cb2ce587",
                    "6ca14c42-fe36-4408-95e6-7305c49c076b",
                    "e39d984f-fa90-4eaf-bb5d-ca21cd0398fc",
                    "5f5ac484-d92f-424e-b0b3-1f60cd1f46c1"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8812680d-4ee4-4ec6-abab-9fd2884ffed8",
                  "title": "Materials",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testAdmin.js",
                  "file": "\\tests\\testAdmin.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook for \"Number of material\"",
                      "fullTitle": "Selenium tests Admin home page Materials \"before each\" hook for \"Number of material\"",
                      "timedOut": true,
                      "duration": 2890,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "// Open browser\ndriver = await new Builder().forBrowser(TEST_BROWSER).build();\n// Open the website\nawait driver.get(\"http://localhost:5555\");\n// Find the input matricule box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t.sendKeys(\"OCB1234\", Key.RETURN);\n// Find the input password box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"password\\\"]\"))\n\t.sendKeys(\"Azertyuiop1234\", Key.RETURN);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[2]/a\"))\n\t.sendKeys(\"\", Key.ENTER);",
                      "err": {
                        "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\Travail\\Projets\\genie_log\\tests\\testAdmin.js)",
                        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\Travail\\Projets\\genie_log\\tests\\testAdmin.js)\n    at listOnTimeout (node:internal/timers:557:17)\n    at processTimers (node:internal/timers:500:7)",
                        "diff": null
                      },
                      "uuid": "58575900-27fd-4c11-a24c-4ecb6f259c3b",
                      "parentUUID": "8812680d-4ee4-4ec6-abab-9fd2884ffed8",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [
                    {
                      "title": "\"after each\" hook for \"Number of material\"",
                      "fullTitle": "Selenium tests Admin home page Materials \"after each\" hook for \"Number of material\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "await driver.quit();",
                      "err": {
                        "message": "TypeError: Cannot read properties of undefined (reading 'quit')",
                        "estack": "TypeError: Cannot read properties of undefined (reading 'quit')\n    at Context.<anonymous> (tests\\testAdmin.js:442:18)\n    at processImmediate (node:internal/timers:464:21)",
                        "diff": null
                      },
                      "uuid": "62e1a8ba-b3fc-4787-88f7-54650bcf9cb8",
                      "parentUUID": "8812680d-4ee4-4ec6-abab-9fd2884ffed8",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "tests": [
                    {
                      "title": "Number of material",
                      "fullTitle": "Selenium tests Admin home page Materials Number of material",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let count = await driver\n    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n    .then(elements => elements.length); // Assert that there are 3 materials\nassert.equal(count, 3);",
                      "err": {},
                      "uuid": "998891f1-34d1-45e3-b4a8-3e7277ca8ca2",
                      "parentUUID": "8812680d-4ee4-4ec6-abab-9fd2884ffed8",
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Adding a material",
                      "fullTitle": "Selenium tests Admin home page Materials Adding a material",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Go to create a new material page\nawait driver\n\t.findElement(By.xpath(\"//main/section/menu/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Find the input title box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"title\\\"]\"))\n\t.sendKeys(\"Iphone10\", Key.RETURN);\n// Find the input version box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"version\\\"]\"))\n\t.sendKeys(\"V1.0\", Key.RETURN);\n// Find the input image box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"image\\\"]\"))\n\t.sendKeys(\"https://www.shutterstock.com/image-photo/new-york-usa-may-302018-260nw-1105180928.jpg\", Key.RETURN);\n// Find the input reference box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"reference\\\"]\"))\n\t.sendKeys(\"AP004\", Key.RETURN);\n// Find the input phone number box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"phoneNumber\\\"]\"))\n\t.sendKeys(\"0299765387\", Key.RETURN);\n//Add a new material\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"save\\\"]\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Count the number of elements\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[2]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 4 materials\n                assert.equal(count, 4);",
                      "err": {},
                      "uuid": "45fc46ae-3422-4875-9525-c610b3194a5c",
                      "parentUUID": "8812680d-4ee4-4ec6-abab-9fd2884ffed8",
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "Deleting a material",
                      "fullTitle": "Selenium tests Admin home page Materials Deleting a material",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Click on the material to delete\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on delete button\nawait driver\n\t.findElement(By.xpath(\"//main/section/section/div/section/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on confirm button\nawait driver\n\t.findElement(By.xpath(\"//body/div/div/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n//Count the new number of materials\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[2]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 3 materials\n                assert.equal(count, 3);",
                      "err": {},
                      "uuid": "a603b7bc-ab58-46a9-afee-794eaf5a086b",
                      "parentUUID": "8812680d-4ee4-4ec6-abab-9fd2884ffed8",
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "998891f1-34d1-45e3-b4a8-3e7277ca8ca2",
                    "45fc46ae-3422-4875-9525-c610b3194a5c",
                    "a603b7bc-ab58-46a9-afee-794eaf5a086b"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bbfba363-9c58-43b4-9551-4bb93b34aa2f",
          "title": "Company",
          "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testCompany.js",
          "file": "\\tests\\testCompany.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "962348be-4c5a-402a-a43e-aea1b8703de9",
              "title": "Object creation",
              "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testCompany.js",
              "file": "\\tests\\testCompany.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "5bc4bbb7-ef49-4bf3-9e59-28fad643dd94",
                  "title": "Creating a company",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testCompany.js",
                  "file": "\\tests\\testCompany.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create an empty company",
                      "fullTitle": "Company Object creation Creating a company Should create an empty company",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const comp = new Company({});\nassert.equal(comp.getRentals().length, 0, \"The list of rentals must contains no element.\");\nassert.equal(comp.getEmployees().length, 0, \"The list of employees must contains no element.\");\nassert.equal(comp.getMaterials().length, 0, \"The list of materials must contains no element.\");\ndone();",
                      "err": {},
                      "uuid": "7643760e-ef41-498b-b697-f97e5627c0f2",
                      "parentUUID": "5bc4bbb7-ef49-4bf3-9e59-28fad643dd94",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the company with objects in it",
                      "fullTitle": "Company Object creation Creating a company Should create the company with objects in it",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nconst emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nconst rent1 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: new Date(\"2023-02-01\"),\n\tendingDate: new Date(\"2023-03-01\")\n});\nconst rent2 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: new Date(\"2024-02-01\"),\n\tendingDate: new Date(\"2025-03-01\")\n});\nconst comp = new Company({});\ncomp.addEmployee(emp1);\ncomp.addMaterial(mat1);\ncomp.addRental(rent1);\ncomp.addRental(rent2);\nassert.equal(comp.getRentals().length, 2, \"The list of rentals must contains 2 elements.\");\nassert.equal(comp.getEmployees().length, 1, \"The list of employees must contains 1 element.\");\nassert.equal(comp.getMaterials().length, 1, \"The list of materials must contains 1 element.\");\ndone();",
                      "err": {},
                      "uuid": "2fa1bf8f-7229-47be-8566-ead8499d9d5b",
                      "parentUUID": "5bc4bbb7-ef49-4bf3-9e59-28fad643dd94",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7643760e-ef41-498b-b697-f97e5627c0f2",
                    "2fa1bf8f-7229-47be-8566-ead8499d9d5b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "2c0d6149-945b-44d2-b9ba-f320ebbed051",
                  "title": "Adding elements to a company",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testCompany.js",
                  "file": "\\tests\\testCompany.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Company with objects in it, adding multiple rents",
                      "fullTitle": "Company Object creation Adding elements to a company Company with objects in it, adding multiple rents",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nconst mat2 = new Material({\n\ttitle: \"Samsung galaxy s8\",\n\tversion: \"v123\",\n\treference: \"AN002\"\n});\nconst emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nconst rent1 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: new Date(\"2023-02-01\"),\n\tendingDate: new Date(\"2023-03-01\")\n});\nconst rent2 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: new Date(\"2024-02-01\"),\n\tendingDate: new Date(\"2025-03-01\")\n});\nconst rent3 = new Rental({\n\temployee: emp1,\n\tmaterial: mat2,\n\tstartingDate: new Date(\"2024-02-01\"),\n\tendingDate: new Date(\"2025-03-01\")\n});\nconst comp = new Company({});\ncomp.addEmployee(emp1);\ncomp.addMaterial(mat1);\ncomp.addMaterial(mat2);\ncomp.addRental(rent1);\ncomp.addRental(rent2);\ncomp.addRental(rent3);\nassert.equal(comp.getRentals().length, 3, \"The list of rentals must contains 3 elements.\");\nassert.equal(comp.getEmployees().length, 1, \"The list of employees must contains 1 element.\");\nassert.equal(comp.getMaterials().length, 2, \"The list of materials must contains 2 elements.\");\ndone();",
                      "err": {},
                      "uuid": "44da9e89-db14-4305-8017-afa94a545e23",
                      "parentUUID": "2c0d6149-945b-44d2-b9ba-f320ebbed051",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Company with objects in it, adding multiple rents (error case)",
                      "fullTitle": "Company Object creation Adding elements to a company Company with objects in it, adding multiple rents (error case)",
                      "timedOut": false,
                      "duration": 19,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\tversion: \"v24587\",\n\t\t\t\t\treference: \"AN001\"\n\t\t\t\t});\n\t\t\t\tconst emp1 = new Employee({\n\t\t\t\t\tname: \"Nicolas\",\n\t\t\t\t\tsurname: \"Martin\",\n\t\t\t\t\temail: \"nicolas.martin@mail.com\",\n\t\t\t\t\tpassword: \"Azertyuiop1234\",\n\t\t\t\t\tpersonnalNumber: \"ABCD123\"\n\t\t\t\t});\n\t\t\t\tconst rent1 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2023-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2023-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent2 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent3 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst comp = new Company({});\n\t\t\t\tassert.throws(() => {\n\t\t\t\t\tcomp.addEmployee(emp1);\n\t\t\t\t\tcomp.addMaterial(mat1);\n\t\t\t\t\tcomp.addRental(rent1);\n\t\t\t\t\tcomp.addRental(rent2);\n\t\t\t\t\t//Should cause the Error, since the material is already located at this time\n\t\t\t\t\tcomp.addRental(rent3);\n\t\t\t\t}, Error, \"Someone is trying to rent a material that is already rented during this period\");\n\t\t\t\tdone();",
                      "err": {},
                      "uuid": "66cd9105-1061-4852-84bc-04ce993bd3d8",
                      "parentUUID": "2c0d6149-945b-44d2-b9ba-f320ebbed051",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "44da9e89-db14-4305-8017-afa94a545e23",
                    "66cd9105-1061-4852-84bc-04ce993bd3d8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 20,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "58697b0a-ca1c-4653-9c61-070e08a3c3cf",
                  "title": "Deleting elements from a company",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testCompany.js",
                  "file": "\\tests\\testCompany.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deleting rentals (not active)",
                      "fullTitle": "Company Object creation Deleting elements from a company Deleting rentals (not active)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\tversion: \"v24587\",\n\t\t\t\t\treference: \"AN001\"\n\t\t\t\t});\n\t\t\t\tconst mat2 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s8\",\n\t\t\t\t\tversion: \"v123\",\n\t\t\t\t\treference: \"AN002\"\n\t\t\t\t});\n\t\t\t\tconst emp1 = new Employee({\n\t\t\t\t\tname: \"Nicolas\",\n\t\t\t\t\tsurname: \"Martin\",\n\t\t\t\t\temail: \"nicolas.martin@mail.com\",\n\t\t\t\t\tpassword: \"Azertyuiop1234\",\n\t\t\t\t\tpersonnalNumber: \"ABCD123\"\n\t\t\t\t});\n\t\t\t\tconst rent1 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2023-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2023-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent2 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent3 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat2,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst comp = new Company({});\n\t\t\t\tcomp.addEmployee(emp1);\n\t\t\t\tcomp.addMaterial(mat1);\n\t\t\t\tcomp.addMaterial(mat2);\n\t\t\t\tcomp.addRental(rent1);\n\t\t\t\tcomp.addRental(rent2);\n\t\t\t\tcomp.addRental(rent3);\n\t\t\t\tassert.equal(comp.getRentals().length, 3, \"The list of rentals must contains 3 elements.\");\n\t\t\t\tcomp.removeRental(rent1);\n\t\t\t\tcomp.removeRental(rent2);\n\t\t\t\tcomp.removeRental(rent3);\n\t\t\t\tassert.equal(comp.getRentals().length, 0, \"The list of rentals must contains no element.\");\n\t\t\t\tdone();",
                      "err": {},
                      "uuid": "1945c0a3-f742-45f5-8e91-13d877070e2c",
                      "parentUUID": "58697b0a-ca1c-4653-9c61-070e08a3c3cf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deleting employees (not active)",
                      "fullTitle": "Company Object creation Deleting elements from a company Deleting employees (not active)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\tversion: \"v24587\",\n\t\t\t\t\treference: \"AN001\"\n\t\t\t\t});\n\t\t\t\tconst mat2 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s8\",\n\t\t\t\t\tversion: \"v123\",\n\t\t\t\t\treference: \"AN002\"\n\t\t\t\t});\n\t\t\t\tconst emp1 = new Employee({\n\t\t\t\t\tname: \"Nicolas\",\n\t\t\t\t\tsurname: \"Martin\",\n\t\t\t\t\temail: \"nicolas.martin@mail.com\",\n\t\t\t\t\tpassword: \"Azertyuiop1234\",\n\t\t\t\t\tpersonnalNumber: \"ABCD123\"\n\t\t\t\t});\n\t\t\t\tconst rent1 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2023-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2023-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent2 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent3 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat2,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst comp = new Company({});\n\t\t\t\tcomp.addEmployee(emp1);\n\t\t\t\tcomp.addMaterial(mat1);\n\t\t\t\tcomp.addMaterial(mat2);\n\t\t\t\tcomp.addRental(rent1);\n\t\t\t\tcomp.addRental(rent2);\n\t\t\t\tcomp.addRental(rent3);\n\t\t\t\tassert.equal(comp.getRentals().length, 3, \"The list of rentals must contains 3 elements.\");\n\t\t\t\tassert.equal(comp.getEmployees().length, 1, \"The list of employees must contains 1 element.\");\n\t\t\t\tcomp.removeEmployee(emp1);\n\t\t\t\tassert.equal(comp.getEmployees().length, 0, \"The list of employees must contains no element.\");\n\t\t\t\tassert.equal(comp.getRentals().length, 0, \"The list of rentals must contains no element.\");\n\t\t\t\tdone();",
                      "err": {},
                      "uuid": "65671392-ce5c-4770-92e8-1a4c3a4bdc26",
                      "parentUUID": "58697b0a-ca1c-4653-9c61-070e08a3c3cf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deleting materials (not active)",
                      "fullTitle": "Company Object creation Deleting elements from a company Deleting materials (not active)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\tversion: \"v24587\",\n\t\t\t\t\treference: \"AN001\"\n\t\t\t\t});\n\t\t\t\tconst mat2 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s8\",\n\t\t\t\t\tversion: \"v123\",\n\t\t\t\t\treference: \"AN002\"\n\t\t\t\t});\n\t\t\t\tconst emp1 = new Employee({\n\t\t\t\t\tname: \"Nicolas\",\n\t\t\t\t\tsurname: \"Martin\",\n\t\t\t\t\temail: \"nicolas.martin@mail.com\",\n\t\t\t\t\tpassword: \"Azertyuiop1234\",\n\t\t\t\t\tpersonnalNumber: \"ABCD123\"\n\t\t\t\t});\n\t\t\t\tconst rent1 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2023-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2023-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent2 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent3 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat2,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst comp = new Company({});\n\t\t\t\tcomp.addEmployee(emp1);\n\t\t\t\tcomp.addMaterial(mat1);\n\t\t\t\tcomp.addMaterial(mat2);\n\t\t\t\tcomp.addRental(rent1);\n\t\t\t\tcomp.addRental(rent2);\n\t\t\t\tcomp.addRental(rent3);\n\t\t\t\tassert.equal(comp.getRentals().length, 3, \"The list of rentals must contains 3 elements.\");\n\t\t\t\tassert.equal(comp.getMaterials().length, 2, \"The list of materials must contains 2 elements.\");\n\t\t\t\tcomp.removeMaterial(mat1);\n\t\t\t\tcomp.removeMaterial(mat2);\n\t\t\t\tassert.equal(comp.getRentals().length, 0, \"The list of rentals must contains no element.\");\n\t\t\t\tassert.equal(comp.getMaterials().length, 0, \"The list of materials must contains no element.\");\n\t\t\t\tdone();",
                      "err": {},
                      "uuid": "4d271388-6205-4cb0-a59f-a5053a147df9",
                      "parentUUID": "58697b0a-ca1c-4653-9c61-070e08a3c3cf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deleting employees, materials & rents (active)",
                      "fullTitle": "Company Object creation Deleting elements from a company Deleting employees, materials & rents (active)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const today = new Date(new Date().setHours(1, 0, 0, 0));\nconst mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nconst mat2 = new Material({\n\ttitle: \"Samsung galaxy s8\",\n\tversion: \"v123\",\n\treference: \"AN002\"\n});\nconst mat3 = new Material({\n\ttitle: \"Samsung galaxy s9\",\n\tversion: \"v-48\",\n\treference: \"AN003\"\n});\nconst emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nconst emp2 = new Employee({\n\tname: \"Robert\",\n\tsurname: \"Durant\",\n\temail: \"robert.durant@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABC4567\"\n});\nconst emp3 = new Employee({\n\tname: \"Jean\",\n\tsurname: \"Valjean\",\n\temail: \"jean.valjean@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"VBN1234\"\n});\nconst rent1 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: today,\n\tendingDate: new Date(\"2023-03-01\")\n});\nconst rent2 = new Rental({\n\temployee: emp2,\n\tmaterial: mat2,\n\tstartingDate: today,\n\tendingDate: new Date(\"2024-03-01\")\n});\nconst rent3 = new Rental({\n\temployee: emp3,\n\tmaterial: mat3,\n\tstartingDate: today,\n\tendingDate: new Date(\"2024-03-01\")\n});\nconst comp = new Company({});\ncomp.addEmployee(emp1);\ncomp.addEmployee(emp2);\ncomp.addEmployee(emp3);\ncomp.addMaterial(mat1);\ncomp.addMaterial(mat2);\ncomp.addMaterial(mat3);\ncomp.addRental(rent1);\ncomp.addRental(rent2);\ncomp.addRental(rent3);\nassert.throws(() => {\n\tcomp.removeRental(rent3);\n}, Error, \"We cannot remove an active rent\");\nassert.throws(() => {\n\tcomp.removeMaterial(mat1);\n}, Error, \"We cannot remove a material with an active rent\");\nassert.throws(() => {\n\tcomp.removeEmployee(emp2);\n}, Error, \"We cannot remove an employee who has an active rent\");\nassert.equal(comp.getEmployees().length, 3, \"The list of employees must contains 3 elements.\");\nassert.equal(comp.getMaterials().length, 3, \"The list of materials must contains 3 elements.\");\nassert.equal(comp.getRentals().length, 3, \"The list of rentals must contains 3 elements.\");\ncomp.removeMaterial(mat1, true);\nassert.equal(comp.getMaterials().length, 2, \"The list of materials must contains 2 elements.\");\nassert.equal(comp.getRentals().length, 2, \"The list of rentals must contains 2 elements.\");\ncomp.removeEmployee(emp2, true);\nassert.equal(comp.getEmployees().length, 2, \"The list of employees must contains 2 elements.\");\nassert.equal(comp.getRentals().length, 1, \"The list of rentals must contains 1 element.\");\ncomp.removeRental(rent3, true);\nassert.equal(comp.getRentals().length, 0, \"The list of rentals must contains no element.\");\ndone();",
                      "err": {},
                      "uuid": "56609058-7a16-4b21-9d3f-e02d5cf7c96c",
                      "parentUUID": "58697b0a-ca1c-4653-9c61-070e08a3c3cf",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1945c0a3-f742-45f5-8e91-13d877070e2c",
                    "65671392-ce5c-4770-92e8-1a4c3a4bdc26",
                    "4d271388-6205-4cb0-a59f-a5053a147df9",
                    "56609058-7a16-4b21-9d3f-e02d5cf7c96c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "db0a16db-fbe2-4a62-a386-33e6a5a33ba3",
              "title": "Database tests",
              "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testCompany.js",
              "file": "\\tests\\testCompany.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "424a39a1-8367-4a4a-a7d4-5c02b013e6c0",
                  "title": "Database insertion",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testCompany.js",
                  "file": "\\tests\\testCompany.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "c83934a8-226a-4b98-b2fe-8cd02ab51aa8",
                      "title": "Retrieve tests",
                      "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testCompany.js",
                      "file": "\\tests\\testCompany.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "Should return the corrects number of elements added",
                          "fullTitle": "Company Database tests Database insertion Retrieve tests Should return the corrects number of elements added",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "assert.equal(database.company.getEmployees().length, 3, \"The list of employees must contains 3 elements.\");\nassert.equal(database.company.getMaterials().length, 3, \"The list of materials must contains 3 elements.\");\nassert.equal(database.company.getRentals().length, 3, \"The list of rentals must contains 3 elements.\");\ndone();",
                          "err": {},
                          "uuid": "22411602-fa7f-4873-abbf-a1954cb96aa9",
                          "parentUUID": "c83934a8-226a-4b98-b2fe-8cd02ab51aa8",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "22411602-fa7f-4873-abbf-a1954cb96aa9"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    },
                    {
                      "uuid": "9425ab3e-ea28-4ca7-b6f1-3d8a9ed1c9ce",
                      "title": "Deletion tests",
                      "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testCompany.js",
                      "file": "\\tests\\testCompany.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "Should return the corrects number of elements after we deleted some",
                          "fullTitle": "Company Database tests Database insertion Deletion tests Should return the corrects number of elements after we deleted some",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "database.company.removeRental(rent1);\ndatabase.company.removeEmployee(emp2); //--> deletes rent refereced by emp2\ndatabase.company.removeMaterial(mat3); //--> deletes rent refereced by mat3\nassert.equal(database.company.getEmployees().length, 2, \"The list of employees must contains 2 elements.\");\nassert.equal(database.company.getMaterials().length, 2, \"The list of materials must contains 2 elements.\");\nassert.equal(database.company.getRentals().length, 0, \"The list of rentals must contains no element.\");\ndone();",
                          "err": {},
                          "uuid": "90d014a8-48df-440e-99f7-f59b58fa6103",
                          "parentUUID": "9425ab3e-ea28-4ca7-b6f1-3d8a9ed1c9ce",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "90d014a8-48df-440e-99f7-f59b58fa6103"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ce638c9f-503a-4e17-babe-5f087dfc9718",
          "title": "Employee",
          "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testEmployee.js",
          "file": "\\tests\\testEmployee.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3d45a080-6632-423b-81a9-922be6861ef8",
              "title": "Object creation",
              "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testEmployee.js",
              "file": "\\tests\\testEmployee.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "c44ea74b-bff9-4374-8756-d46317898022",
                  "title": "Id tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the employee without having to enter an id",
                      "fullTitle": "Employee Object creation Id tests Should create the employee without having to enter an id",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getId(), \"string\", \"The id must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "62a9cab5-35e6-4dc2-9fa3-0d79a1509664",
                      "parentUUID": "c44ea74b-bff9-4374-8756-d46317898022",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "62a9cab5-35e6-4dc2-9fa3-0d79a1509664"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0b7c56fe-c4fd-4a16-9ce1-7ced78384dd4",
                  "title": "Name tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the employee with a standard name (no space or special characters)",
                      "fullTitle": "Employee Object creation Name tests Should create the employee with a standard name (no space or special characters)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getName(), \"string\", \"The name must be a String.\");\nassert.equal(emp1.getName(), \"Nicolas\", \"A standard name should be accepted.\");\ndone();",
                      "err": {},
                      "uuid": "1e1bb21c-d842-4c90-bcef-8f2480271bd6",
                      "parentUUID": "0b7c56fe-c4fd-4a16-9ce1-7ced78384dd4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with a name containing a space",
                      "fullTitle": "Employee Object creation Name tests Should create the employee with a name containing a space",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Jean Jacques\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(emp1.getName(), \"Jean Jacques\", \"A name containing a space characted should be accepted.\");\ndone();",
                      "err": {},
                      "uuid": "80790128-e164-462e-a9a1-16fd9213bf1e",
                      "parentUUID": "0b7c56fe-c4fd-4a16-9ce1-7ced78384dd4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with a name containing an hyphen",
                      "fullTitle": "Employee Object creation Name tests Should create the employee with a name containing an hyphen",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Jean-Jacques\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(emp1.getName(), \"Jean-Jacques\", \"A name containing hyphen should be accepted.\");\ndone();",
                      "err": {},
                      "uuid": "893260bf-9f22-4d23-b39d-22f9180f5d01",
                      "parentUUID": "0b7c56fe-c4fd-4a16-9ce1-7ced78384dd4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with an accentuated name",
                      "fullTitle": "Employee Object creation Name tests Should create the employee with an accentuated name",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nîcolàs\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(emp1.getName(), \"Nîcolàs\", \"A name containing accentuated characted should be accepted.\");\ndone();",
                      "err": {},
                      "uuid": "ee05a8bb-aafd-4cd4-a9a6-2cacff5bb4e9",
                      "parentUUID": "0b7c56fe-c4fd-4a16-9ce1-7ced78384dd4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect name (format)",
                      "fullTitle": "Employee Object creation Name tests Should throw an error : employee with an incorrect name (format)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas/\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of name\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of name (empty string)\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"1234\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of name (contains only numbers)\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \" \",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of name (only spaces)\");\ndone();",
                      "err": {},
                      "uuid": "87d0d85c-d062-45bc-9ecc-2caad1ccddbe",
                      "parentUUID": "0b7c56fe-c4fd-4a16-9ce1-7ced78384dd4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect name (size)",
                      "fullTitle": "Employee Object creation Name tests Should throw an error : employee with an incorrect name (size)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of name : too long\");\ndone();",
                      "err": {},
                      "uuid": "8dd259ae-b8e4-4624-8d8e-851670f26004",
                      "parentUUID": "0b7c56fe-c4fd-4a16-9ce1-7ced78384dd4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1e1bb21c-d842-4c90-bcef-8f2480271bd6",
                    "80790128-e164-462e-a9a1-16fd9213bf1e",
                    "893260bf-9f22-4d23-b39d-22f9180f5d01",
                    "ee05a8bb-aafd-4cd4-a9a6-2cacff5bb4e9",
                    "87d0d85c-d062-45bc-9ecc-2caad1ccddbe",
                    "8dd259ae-b8e4-4624-8d8e-851670f26004"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "15403c22-8ed3-481d-9464-c2598b7227a9",
                  "title": "Surname tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the employee with a correct surname",
                      "fullTitle": "Employee Object creation Surname tests Should create the employee with a correct surname",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getSurname(), \"string\", \"The surname must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "81271271-6571-4edc-b383-7e3b8ac9f4c7",
                      "parentUUID": "15403c22-8ed3-481d-9464-c2598b7227a9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with a correct surname",
                      "fullTitle": "Employee Object creation Surname tests Should create the employee with a correct surname",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin Jean\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getSurname(), \"string\", \"The surname must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "3969837f-ee8b-410a-bc07-a1612202379e",
                      "parentUUID": "15403c22-8ed3-481d-9464-c2598b7227a9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with a correct surname",
                      "fullTitle": "Employee Object creation Surname tests Should create the employee with a correct surname",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin-Jean\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getSurname(), \"string\", \"The surname must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "d133b1b7-9762-49c6-a101-9ebfaa27fdc6",
                      "parentUUID": "15403c22-8ed3-481d-9464-c2598b7227a9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with a correct surname",
                      "fullTitle": "Employee Object creation Surname tests Should create the employee with a correct surname",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Màrtîn\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getSurname(), \"string\", \"The surname must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "9b85aa0d-7671-4ff5-9360-b6e2b91c9dda",
                      "parentUUID": "15403c22-8ed3-481d-9464-c2598b7227a9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect surname (format)",
                      "fullTitle": "Employee Object creation Surname tests Should throw an error : employee with an incorrect surname (format)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin/\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of surname\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of surname (empty surname)\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"1234\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of surname (composed only of numbers)\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \" \",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of surname (only spaces)\");\ndone();",
                      "err": {},
                      "uuid": "1e792ba9-22e0-4522-92a6-896c1e757523",
                      "parentUUID": "15403c22-8ed3-481d-9464-c2598b7227a9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect surname (size)",
                      "fullTitle": "Employee Object creation Surname tests Should throw an error : employee with an incorrect surname (size)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martinnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of surname : too long\");\ndone();",
                      "err": {},
                      "uuid": "39f537bb-c405-4009-b96d-f2edf2213352",
                      "parentUUID": "15403c22-8ed3-481d-9464-c2598b7227a9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "81271271-6571-4edc-b383-7e3b8ac9f4c7",
                    "3969837f-ee8b-410a-bc07-a1612202379e",
                    "d133b1b7-9762-49c6-a101-9ebfaa27fdc6",
                    "9b85aa0d-7671-4ff5-9360-b6e2b91c9dda",
                    "1e792ba9-22e0-4522-92a6-896c1e757523",
                    "39f537bb-c405-4009-b96d-f2edf2213352"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8ec1f994-911c-4b36-92b2-405c3f5faed9",
                  "title": "Email tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the employee with a correct email",
                      "fullTitle": "Employee Object creation Email tests Should create the employee with a correct email",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getEmail(), \"string\", \"The email must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "1f253884-01aa-4df4-b0c8-41072927873d",
                      "parentUUID": "8ec1f994-911c-4b36-92b2-405c3f5faed9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with a correct email (containing special characters)",
                      "fullTitle": "Employee Object creation Email tests Should create the employee with a correct email (containing special characters)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nîcolàs.m/artin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getEmail(), \"string\", \"The email must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "019ba706-b5ce-4dc0-ad87-d655b16b65d9",
                      "parentUUID": "8ec1f994-911c-4b36-92b2-405c3f5faed9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect mail (missing  or incorrect characters)",
                      "fullTitle": "Employee Object creation Email tests Should throw an error : employee with an incorrect mail (missing  or incorrect characters)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martinmail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of email : missing @\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas@martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of email : too many @\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mailcom\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of email : missing extension\");\ndone();",
                      "err": {},
                      "uuid": "3f21c1d1-bc07-467f-9858-dc894fa889f4",
                      "parentUUID": "8ec1f994-911c-4b36-92b2-405c3f5faed9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1f253884-01aa-4df4-b0c8-41072927873d",
                    "019ba706-b5ce-4dc0-ad87-d655b16b65d9",
                    "3f21c1d1-bc07-467f-9858-dc894fa889f4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "e763f080-521a-4270-a6a9-918c43a2d8c6",
                  "title": "Password tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the employee with a correct password",
                      "fullTitle": "Employee Object creation Password tests Should create the employee with a correct password",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof (emp1), \"object\", \"Should be an object.\");\ndone();",
                      "err": {},
                      "uuid": "1ac68b48-7a98-4db8-8851-57aa52bd8946",
                      "parentUUID": "e763f080-521a-4270-a6a9-918c43a2d8c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect password (missing characters)",
                      "fullTitle": "Employee Object creation Password tests Should throw an error : employee with an incorrect password (missing characters)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martinmail.com\",\n\t\tpassword: \"azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of password : missing uppercase letter\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martinmail.com\",\n\t\tpassword: \"Azertyuiop\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of password : missing numbers\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martinmail.com\",\n\t\tpassword: \"Azer12\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of password : too short\");\ndone();",
                      "err": {},
                      "uuid": "31c51098-84d7-48e0-b5cc-4a13b120ef09",
                      "parentUUID": "e763f080-521a-4270-a6a9-918c43a2d8c6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1ac68b48-7a98-4db8-8851-57aa52bd8946",
                    "31c51098-84d7-48e0-b5cc-4a13b120ef09"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f624aab9-005a-4e21-a57b-7b2d73f3c93c",
                  "title": "PersonnalNumber tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the employee with a correct personnal number",
                      "fullTitle": "Employee Object creation PersonnalNumber tests Should create the employee with a correct personnal number",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getPersonnalNumber(), \"string\", \"The personnal number must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "14846ed0-4a7c-4a3b-bc13-127079340d63",
                      "parentUUID": "f624aab9-005a-4e21-a57b-7b2d73f3c93c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect personnal number (format)",
                      "fullTitle": "Employee Object creation PersonnalNumber tests Should throw an error : employee with an incorrect personnal number (format)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"AB/D123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of personnal number : special characters\");\ndone();",
                      "err": {},
                      "uuid": "55fc503c-8671-4e5c-a8e6-9be17ff17b80",
                      "parentUUID": "f624aab9-005a-4e21-a57b-7b2d73f3c93c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect personnal number (size)",
                      "fullTitle": "Employee Object creation PersonnalNumber tests Should throw an error : employee with an incorrect personnal number (size)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABC123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of personnal number : too short\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD1234\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of personnal number : too long\");\ndone();",
                      "err": {},
                      "uuid": "4c51864f-15d3-44af-ac38-98c56c6bcd4b",
                      "parentUUID": "f624aab9-005a-4e21-a57b-7b2d73f3c93c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "14846ed0-4a7c-4a3b-bc13-127079340d63",
                    "55fc503c-8671-4e5c-a8e6-9be17ff17b80",
                    "4c51864f-15d3-44af-ac38-98c56c6bcd4b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a30816e2-e887-4808-9670-ec32486487c7",
              "title": "Database insertion",
              "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testEmployee.js",
              "file": "\\tests\\testEmployee.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Database insertion\"",
                  "fullTitle": "Employee Database insertion \"before all\" hook in \"Database insertion\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "database.company.addEmployee(emp1)",
                  "err": {},
                  "uuid": "8f5e8cd7-e010-4b80-b73f-8cc600023fe4",
                  "parentUUID": "a30816e2-e887-4808-9670-ec32486487c7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "021c86ee-289b-4ad9-a1f9-5feef9a9557c",
                  "title": "Retrieve tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should return the employee added",
                      "fullTitle": "Employee Database insertion Retrieve tests Should return the employee added",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const retrievedEmployee = database.company.getEmployee(emp1.getId());\nassert.equal(retrievedEmployee, emp1, \"An added employee is returned by the getter\");\ndone();",
                      "err": {},
                      "uuid": "eb3ff049-5142-482f-858a-29cc5e0ab15d",
                      "parentUUID": "021c86ee-289b-4ad9-a1f9-5feef9a9557c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "eb3ff049-5142-482f-858a-29cc5e0ab15d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "23374142-8a7f-4aec-a49c-8d5ddcb91aae",
                  "title": "Unicity tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not add a employee already in the database",
                      "fullTitle": "Employee Database insertion Unicity tests Should not add a employee already in the database",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Exact same object (same id)\nassert.throws(() => {\n\tdatabase.company.addEmployee(emp1);\n}, Error, \"A same employee is being added several times in the database\");\n// Same reference but different id\nassert.throws(() => {\n\tconst sameReferenceDifferentId = new Employee(emp1);\n\tdatabase.company.addEmployee(sameReferenceDifferentId);\n}, Error, \"An employee is being added in the database with an already added employee id\");\nassert.throws(() => {\n\tconst emp2 = new Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: emp1.getPersonnalNumber()\n\t});\n\tdatabase.company.addEmployee(emp2);\n}, Error, \"An employee with an already used personnal number is being added to the company\");\nassert.throws(() => {\n\tconst emp3 = new Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: emp1.getEmail(),\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"12345AB\"\n\t});\n\tdatabase.company.addEmployee(emp3);\n}, Error, \"An employee with an already used email is being added to the company\");\ndone();",
                      "err": {},
                      "uuid": "c3d1b11e-b929-44a2-8c61-9427130c0bfe",
                      "parentUUID": "23374142-8a7f-4aec-a49c-8d5ddcb91aae",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c3d1b11e-b929-44a2-8c61-9427130c0bfe"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc04aabc-786e-45da-ab3e-877f18eac1ff",
              "title": "Database deletion",
              "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testEmployee.js",
              "file": "\\tests\\testEmployee.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Database deletion\"",
                  "fullTitle": "Employee Database deletion \"before all\" hook in \"Database deletion\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "database.company.addEmployee(emp1)",
                  "err": {},
                  "uuid": "382e63e0-42bd-4f5a-8ae5-e0d0a844b3b4",
                  "parentUUID": "dc04aabc-786e-45da-ab3e-877f18eac1ff",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "ce012795-9cfa-46e9-b2d8-2777382887d4",
                  "title": "Retrieve tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not return the deleted material",
                      "fullTitle": "Employee Database deletion Retrieve tests Should not return the deleted material",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "database.company.removeEmployee(emp1);\nassert.equal(database.company.getEmployee(emp1.getId()), undefined, \"The employee is not removed from the database when called for being deleted.\");\ndone();",
                      "err": {},
                      "uuid": "e6178a7b-4db7-4a52-a961-0fb46e7ad989",
                      "parentUUID": "ce012795-9cfa-46e9-b2d8-2777382887d4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e6178a7b-4db7-4a52-a961-0fb46e7ad989"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ff6e5352-112c-42a9-9c43-3a34014c849d",
          "title": "Material",
          "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testMaterial.js",
          "file": "\\tests\\testMaterial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4ecc9ac6-509e-4977-a0ac-4e473fe7234c",
              "title": "Object creation",
              "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testMaterial.js",
              "file": "\\tests\\testMaterial.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a34631e3-49a1-4775-aab4-42b2d115a289",
                  "title": "Id tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the material whithout an id specified",
                      "fullTitle": "Material Object creation Id tests Should create the material whithout an id specified",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nassert.equal(typeof mat1.getId(), \"string\", \"The id must be a String (no value given)\");\ndone();",
                      "err": {},
                      "uuid": "829216ae-fc8a-41ba-8e13-9dd6d167e528",
                      "parentUUID": "a34631e3-49a1-4775-aab4-42b2d115a289",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "829216ae-fc8a-41ba-8e13-9dd6d167e528"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "bfcf9efd-1b24-4a0e-8bd1-58698bdfed88",
                  "title": "Title tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not create the material with a missing title",
                      "fullTitle": "Material Object creation Title tests Should not create the material with a missing title",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whithout a title\");\ndone();",
                      "err": {},
                      "uuid": "8f9eff0a-2e24-41b6-852a-f2f9f2959c23",
                      "parentUUID": "bfcf9efd-1b24-4a0e-8bd1-58698bdfed88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong title value",
                      "fullTitle": "Material Object creation Title tests Should not create the material with a wrong title value",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung_10\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with a non alphanumerical character in the title\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: 48,\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with a non string title\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with an empty title\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \" \",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with an empty title (it contains just a space character)\");\ndone();",
                      "err": {},
                      "uuid": "ecb9ad30-0f3f-4cf4-a4f6-e8bf60b5b04a",
                      "parentUUID": "bfcf9efd-1b24-4a0e-8bd1-58698bdfed88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong size title",
                      "fullTitle": "Material Object creation Title tests Should not create the material with a wrong size title",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"azeazeazeazeazeazeazeazeazeazeaze\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with a too long title\");\ndone();",
                      "err": {},
                      "uuid": "9e1fdb15-41ec-453a-811b-987b4c6d62e1",
                      "parentUUID": "bfcf9efd-1b24-4a0e-8bd1-58698bdfed88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the material with specified titles",
                      "fullTitle": "Material Object creation Title tests Should create the material with specified titles",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"IOS157\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat2 = new Material({\n\ttitle: \"IPhone3\",\n\tversion: \"IOS157\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nassert.equal(mat1.getTitle(), \"Samsung galaxy s7\", \"The title should be defined (contains spaces)\");\nassert.equal(mat2.getTitle(), \"IPhone3\", \"The title should be defined (no spaces, letters and number)\");\ndone();",
                      "err": {},
                      "uuid": "30d554d1-065f-49e1-91b0-463427c92b94",
                      "parentUUID": "bfcf9efd-1b24-4a0e-8bd1-58698bdfed88",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8f9eff0a-2e24-41b6-852a-f2f9f2959c23",
                    "ecb9ad30-0f3f-4cf4-a4f6-e8bf60b5b04a",
                    "9e1fdb15-41ec-453a-811b-987b4c6d62e1",
                    "30d554d1-065f-49e1-91b0-463427c92b94"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f67f104e-8117-478f-81ca-7dc4affb812f",
                  "title": "Version tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not create the material with a missing version",
                      "fullTitle": "Material Object creation Version tests Should not create the material with a missing version",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whithout a version\");\ndone();",
                      "err": {},
                      "uuid": "ee2db315-adc9-426c-9ed8-033ec373f3d4",
                      "parentUUID": "f67f104e-8117-478f-81ca-7dc4affb812f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong version value",
                      "fullTitle": "Material Object creation Version tests Should not create the material with a wrong version value",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\t\t\t\t\tnew Material({\n\t\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\t\tversion: 158,\n\t\t\t\t\t\treference: \"AN001\",\n\t\t\t\t\t\tphoneNumber: \"0685557844\"\n\t\t\t\t\t});\n\t\t\t\t}, Error, \"The material is being created whith a non string version\");\n\t\t\t\tassert.throws(() => {\n\t\t\t\t\tnew Material({\n\t\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\t\tversion: \"\",\n\t\t\t\t\t\treference: \"AN001\",\n\t\t\t\t\t\tphoneNumber: \"0685557844\"\n\t\t\t\t\t});\n\t\t\t\t}, Error, \"The material is being created whith an empty version field\");\n\t\t\t\tassert.throws(() => {\n\t\t\t\t\tnew Material({\n\t\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\t\tversion: \" \",\n\t\t\t\t\t\treference: \"AN001\",\n\t\t\t\t\t\tphoneNumber: \"0685557844\"\n\t\t\t\t\t});\n\t\t\t\t}, Error, \"The material is being created whith an empty version field (just a space)\");\n\t\t\t\tdone();",
                      "err": {},
                      "uuid": "f6dd7758-5483-40ce-b2a0-3a6e0fc33156",
                      "parentUUID": "f67f104e-8117-478f-81ca-7dc4affb812f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong size version",
                      "fullTitle": "Material Object creation Version tests Should not create the material with a wrong size version",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"1\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith an version field too short\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"1 \",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith an version field too short (the spaces musn't be counted)\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"1234567891234567\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith an version field too long\");\ndone();",
                      "err": {},
                      "uuid": "04960e3a-12dc-4230-b274-8844adb1b0f0",
                      "parentUUID": "f67f104e-8117-478f-81ca-7dc4affb812f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the material with specified versions",
                      "fullTitle": "Material Object creation Version tests Should create the material with specified versions",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"V 10\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat2 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"IOS157\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat3 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"V1-3\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat4 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"V1.3\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nassert.equal(mat1.getVersion(), \"V 10\", \"The version should be defined (contains a space)\");\nassert.equal(mat2.getVersion(), \"IOS157\", \"The version should be defined (no spaces, letters and numbers)\");\nassert.equal(mat3.getVersion(), \"V1-3\", \"The version should be defined (contains a - )\");\nassert.equal(mat4.getVersion(), \"V1.3\", \"The version should be defined (contains a . )\");\ndone();",
                      "err": {},
                      "uuid": "38420cf1-9b19-466a-b2bf-ed9dbcf2f28e",
                      "parentUUID": "f67f104e-8117-478f-81ca-7dc4affb812f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ee2db315-adc9-426c-9ed8-033ec373f3d4",
                    "f6dd7758-5483-40ce-b2a0-3a6e0fc33156",
                    "04960e3a-12dc-4230-b274-8844adb1b0f0",
                    "38420cf1-9b19-466a-b2bf-ed9dbcf2f28e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0d8112b3-0cf4-4e8d-860f-fa2119d366b9",
                  "title": "Reference tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not create the material with a missing reference",
                      "fullTitle": "Material Object creation Reference tests Should not create the material with a missing reference",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whithout a reference\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith an empty reference field\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \" \",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith an empty reference field (just a space)\");\ndone();",
                      "err": {},
                      "uuid": "770ee93e-79ed-4e5e-a1fa-9b123eaef1a8",
                      "parentUUID": "0d8112b3-0cf4-4e8d-860f-fa2119d366b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong reference value",
                      "fullTitle": "Material Object creation Reference tests Should not create the material with a wrong reference value",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: 158,\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a non string reference\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"RT\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a reference not containing any number\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"15715\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a reference not containing any letter\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"RTT15\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a reference containing too much letters at the begenning (more than 2)\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"RT1585\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a reference containing too much numbers at the end (more than 3)\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"ap101\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a reference containing lowercase characters that should be uppercased\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP-15\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a non alphanumerical character in the reference\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"CD005\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a non Apple, Android or XX format\");\ndone();",
                      "err": {},
                      "uuid": "72ab306a-9783-4db6-be69-d8bbd8a46e8d",
                      "parentUUID": "0d8112b3-0cf4-4e8d-860f-fa2119d366b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong size reference",
                      "fullTitle": "Material Object creation Reference tests Should not create the material with a wrong size reference",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP1505\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a too long reference\");\ndone();",
                      "err": {},
                      "uuid": "d9b650b9-540f-46f6-8e03-53d7a95e7dc6",
                      "parentUUID": "0d8112b3-0cf4-4e8d-860f-fa2119d366b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the material with specified references",
                      "fullTitle": "Material Object creation Reference tests Should create the material with specified references",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Iphone 10\",\n\tversion: \"v24587\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat2 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN014\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat3 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"XX147\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nassert.equal(mat1.getReference(), \"AP150\", \"The reference should be defined (this is a two letters, 3 numbers format reference with an Apple format)\");\nassert.equal(mat2.getReference(), \"AN014\", \"The reference should be defined (this is a two letters, 3 numbers format reference with an Android format)\");\nassert.equal(mat3.getReference(), \"XX147\", \"The reference should be defined (this is a two letters, 3 numbers format reference with an non Android or Apple format)\");\ndone();",
                      "err": {},
                      "uuid": "b94ef629-fde9-4174-861c-ac16e289f9d5",
                      "parentUUID": "0d8112b3-0cf4-4e8d-860f-fa2119d366b9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "770ee93e-79ed-4e5e-a1fa-9b123eaef1a8",
                    "72ab306a-9783-4db6-be69-d8bbd8a46e8d",
                    "d9b650b9-540f-46f6-8e03-53d7a95e7dc6",
                    "b94ef629-fde9-4174-861c-ac16e289f9d5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "bcbbcf4d-2ed6-4851-a665-72c343ec93f0",
                  "title": "Picture tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the material whith a missing picture",
                      "fullTitle": "Material Object creation Picture tests Should create the material whith a missing picture",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AP150\",\n\tphoneNumber: \"0685557844\"\n});\nassert.equal(mat1.getPicture(), undefined, \"The picture should be undefined (no value given)\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP150\",\n\t\tpicture: \"\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP150\",\n\t\tpicture: \" \",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with an empty string picture link\");\ndone();",
                      "err": {},
                      "uuid": "74233f3b-cd18-4586-be7f-6858d7cfca80",
                      "parentUUID": "bcbbcf4d-2ed6-4851-a665-72c343ec93f0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong extension picture",
                      "fullTitle": "Material Object creation Picture tests Should not create the material with a wrong extension picture",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP150\",\n\t\tpicture: 158,\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with a non string picture\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP150\",\n\t\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.svg\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with a non png/jpg picture\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP150\",\n\t\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with a non extension picture\");\ndone();",
                      "err": {},
                      "uuid": "7cdbc9a4-1fbe-4755-b728-0c1c1865aec3",
                      "parentUUID": "bcbbcf4d-2ed6-4851-a665-72c343ec93f0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the material with specified pictures",
                      "fullTitle": "Material Object creation Picture tests Should create the material with specified pictures",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat2 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.jpg\",\n\tphoneNumber: \"0685557844\"\n});\nassert.equal(mat1.getPicture(), \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\", \"The picture should be defined (this is a .png picture)\");\nassert.equal(mat2.getPicture(), \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.jpg\", \"The picture should be defined (this is a .jpg picture)\");\ndone();",
                      "err": {},
                      "uuid": "92fa2dcf-b007-46ce-a2da-9a831c1d10a5",
                      "parentUUID": "bcbbcf4d-2ed6-4851-a665-72c343ec93f0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "74233f3b-cd18-4586-be7f-6858d7cfca80",
                    "7cdbc9a4-1fbe-4755-b728-0c1c1865aec3",
                    "92fa2dcf-b007-46ce-a2da-9a831c1d10a5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "1b7fcf93-a97e-418c-851d-cbb9ccf5ab8c",
                  "title": "Phone number tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the material whithout a phone number",
                      "fullTitle": "Material Object creation Phone number tests Should create the material whithout a phone number",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nassert.equal(mat1.getPhoneNumber(), undefined, \"The phone number should be undefined (no value given)\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"\"\n\t});\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \" \"\n\t});\n}, Error, \"The material is being created with an empty phone number field\");\ndone();",
                      "err": {},
                      "uuid": "558bf664-524a-46c3-b568-9fbb3fe98cd1",
                      "parentUUID": "1b7fcf93-a97e-418c-851d-cbb9ccf5ab8c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong size phone number",
                      "fullTitle": "Material Object creation Phone number tests Should not create the material with a wrong size phone number",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"068555784414\"\n\t});\n}, Error, \"The material is being created with a too long phone number\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"068555\"\n\t});\n}, Error, \"The material is being created with a too short phone number\");\ndone();",
                      "err": {},
                      "uuid": "082cb047-c7e9-4100-8b51-f47516a1d2c0",
                      "parentUUID": "1b7fcf93-a97e-418c-851d-cbb9ccf5ab8c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong phone number value",
                      "fullTitle": "Material Object creation Phone number tests Should not create the material with a wrong phone number value",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"azeazeazee\"\n\t});\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"06855-7844\"\n\t});\n}, Error, \"The material is being created with a phone number containing non numerical characters\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: 1587485\n\t});\n}, Error, \"The material is being created with a non string phone number\");\ndone();",
                      "err": {},
                      "uuid": "2b9cb145-954e-4014-84ef-6d69aafdcf73",
                      "parentUUID": "1b7fcf93-a97e-418c-851d-cbb9ccf5ab8c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the material with the specified phone numbers",
                      "fullTitle": "Material Object creation Phone number tests Should create the material with the specified phone numbers",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\",\n\tphoneNumber: \"0685557844\"\n});\nassert.equal(mat1.getPhoneNumber(), \"0685557844\", \"The phone number should be defined\");\ndone();",
                      "err": {},
                      "uuid": "06742a1d-7c84-46d8-9b2f-c8524eed061a",
                      "parentUUID": "1b7fcf93-a97e-418c-851d-cbb9ccf5ab8c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "558bf664-524a-46c3-b568-9fbb3fe98cd1",
                    "082cb047-c7e9-4100-8b51-f47516a1d2c0",
                    "2b9cb145-954e-4014-84ef-6d69aafdcf73",
                    "06742a1d-7c84-46d8-9b2f-c8524eed061a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3ab05735-c95f-4402-8936-d822a4de6ee0",
              "title": "Database insertion",
              "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testMaterial.js",
              "file": "\\tests\\testMaterial.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Database insertion\"",
                  "fullTitle": "Material Database insertion \"before all\" hook in \"Database insertion\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "database.company.addMaterial(testMaterial)",
                  "err": {},
                  "uuid": "b3ddb463-b69f-44ad-8d24-8c58f518a935",
                  "parentUUID": "3ab05735-c95f-4402-8936-d822a4de6ee0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "1d54f38d-7a86-43b7-8228-ea69a0825c0d",
                  "title": "Retrieve tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should return the material added",
                      "fullTitle": "Material Database insertion Retrieve tests Should return the material added",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const retrievedMaterial = database.company.getMaterial(testMaterial.getId());\nassert.equal(retrievedMaterial, testMaterial, \"An added material is not returned by the getter\");\ndone();",
                      "err": {},
                      "uuid": "65c7a26e-0ed3-4d18-a223-d655b30693fe",
                      "parentUUID": "1d54f38d-7a86-43b7-8228-ea69a0825c0d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "65c7a26e-0ed3-4d18-a223-d655b30693fe"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "2d5f55d5-067f-4f98-a34f-0f0ffd1b9744",
                  "title": "Unicity tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not add a material already in the database",
                      "fullTitle": "Material Database insertion Unicity tests Should not add a material already in the database",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Exact same object (same id)\nassert.throws(() => {\n\tdatabase.company.addMaterial(testMaterial);\n}, Error, \"A same material is being added several times in the database\");\n// Same reference but different id\nassert.throws(() => {\n\tconst sameReferenceDifferentId = new Material(testMaterial);\n\tdatabase.company.addMaterial(sameReferenceDifferentId);\n}, Error, \"A material is being added in the database with an already added material id\");\nassert.throws(() => {\n\tconst referenceCopy = new Material({\n\t\ttitle: \"Samsung Galaxy fold\",\n\t\tversion: \"v24587\",\n\t\treference: testMaterial.getReference(),\n\t\tphoneNumber: \"0685557844\"\n\t});\n\tdatabase.company.addMaterial(referenceCopy);\n}, Error, \"A material with an already used reference is being added to the company\");\ndone();",
                      "err": {},
                      "uuid": "0018d63d-c804-46a9-90bd-96df8362f8f4",
                      "parentUUID": "2d5f55d5-067f-4f98-a34f-0f0ffd1b9744",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0018d63d-c804-46a9-90bd-96df8362f8f4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aaa36fcb-7757-4bd8-89e2-8ab43d68c505",
              "title": "Database deletion",
              "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testMaterial.js",
              "file": "\\tests\\testMaterial.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Database deletion\"",
                  "fullTitle": "Material Database deletion \"before all\" hook in \"Database deletion\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "database.company.addMaterial(testMaterial)",
                  "err": {},
                  "uuid": "b4bc98ad-aa8b-4844-a033-c1f653b37890",
                  "parentUUID": "aaa36fcb-7757-4bd8-89e2-8ab43d68c505",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "cb2f199d-94a6-4f4d-a815-91ff633860a2",
                  "title": "Retrieve tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not return the deleted material",
                      "fullTitle": "Material Database deletion Retrieve tests Should not return the deleted material",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "database.company.removeMaterial(testMaterial);\nassert.equal(database.company.getMaterial(testMaterial.getId()), undefined, \"The material is not removed from the database when called for being deleted.\");\ndone();",
                      "err": {},
                      "uuid": "6a021d04-da65-43c2-88da-10f49f1a827a",
                      "parentUUID": "cb2f199d-94a6-4f4d-a815-91ff633860a2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6a021d04-da65-43c2-88da-10f49f1a827a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "82cac8fe-a6e8-4d34-849d-c1f8da441b8e",
          "title": "Rental",
          "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testRental.js",
          "file": "\\tests\\testRental.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d55d8c67-3c2d-43e1-8844-d7d60bcb0289",
              "title": "Object creation",
              "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testRental.js",
              "file": "\\tests\\testRental.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "2e57d755-b453-410f-a49e-ce8cec8ad33f",
                  "title": "Id tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testRental.js",
                  "file": "\\tests\\testRental.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the rental without having to enter an id",
                      "fullTitle": "Rental Object creation Id tests Should create the rental without having to enter an id",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nconst emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nconst rent1 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: new Date(\"2023-02-01\"),\n\tendingDate: new Date(\"2023-03-01\")\n});\nassert.equal(typeof rent1.getId(), \"string\", \"The id must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "afb4b09c-d0f0-4bd6-a69d-eee917aa113b",
                      "parentUUID": "2e57d755-b453-410f-a49e-ce8cec8ad33f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "afb4b09c-d0f0-4bd6-a69d-eee917aa113b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c86edb2e-b033-4e24-8e07-eca080b3c4c6",
                  "title": "Begin & ending date tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testRental.js",
                  "file": "\\tests\\testRental.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create a rental with valid dates values",
                      "fullTitle": "Rental Object creation Begin & ending date tests Should create a rental with valid dates values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nconst emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nconst rent1 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: new Date(\"2025-02-01\"),\n\tendingDate: new Date(\"2025-03-01\")\n});\nassert.equal(typeof rent1.getStartingDate(), \"object\", \"The starting date must be of type date.\");\nassert.equal(typeof rent1.getEndingDate(), \"object\", \"The ending date must be of type date.\");\ndone();",
                      "err": {},
                      "uuid": "0846d112-82a1-4d36-a2e2-e5eb50d84951",
                      "parentUUID": "c86edb2e-b033-4e24-8e07-eca080b3c4c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create a rental with valid dates values",
                      "fullTitle": "Rental Object creation Begin & ending date tests Should create a rental with valid dates values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nconst emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.throws(() => {\n\tnew Rental({\n\t\temployee: emp1,\n\t\tmaterial: mat1,\n\t\tstartingDate: new Date(\"2025-02-01\"),\n\t\tendingDate: new Date(\"2024-03-01\")\n\t});\n}, Error, \"The rental is being created with ending date before a the begin date\");\nassert.throws(() => {\n\tnew Rental({\n\t\temployee: emp1,\n\t\tmaterial: mat1,\n\t\tstartingDate: new Date(\"2020-02-01\"),\n\t\tendingDate: new Date(\"2024-03-01\")\n\t});\n}, Error, \"The rental is being created with starting date before today's date\");\ndone();",
                      "err": {},
                      "uuid": "fc9866da-bccf-49ea-9291-c8600960a7d7",
                      "parentUUID": "c86edb2e-b033-4e24-8e07-eca080b3c4c6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0846d112-82a1-4d36-a2e2-e5eb50d84951",
                    "fc9866da-bccf-49ea-9291-c8600960a7d7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2f99bc9b-4b31-4c59-ba52-ddb99af3aa72",
              "title": "Database insertion",
              "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testRental.js",
              "file": "\\tests\\testRental.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Database insertion\"",
                  "fullTitle": "Rental Database insertion \"before all\" hook in \"Database insertion\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "database.company.addRental(rent1)",
                  "err": {},
                  "uuid": "75e5bded-d5cd-4de1-9752-5464cc4ee326",
                  "parentUUID": "2f99bc9b-4b31-4c59-ba52-ddb99af3aa72",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "23944f70-1d3a-4524-b72d-82262adf63d1",
                  "title": "Retrieve tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testRental.js",
                  "file": "\\tests\\testRental.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should return the rental added",
                      "fullTitle": "Rental Database insertion Retrieve tests Should return the rental added",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const retrievedRental = database.company.getRentals(rent1.getId());\nassert.equal(database.company.getRental(rent1.getId()), rent1, \"An added rental is returned by the getter\");\ndone();",
                      "err": {},
                      "uuid": "9fb904a9-66ec-4cbd-852a-cc512c022c4c",
                      "parentUUID": "23944f70-1d3a-4524-b72d-82262adf63d1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9fb904a9-66ec-4cbd-852a-cc512c022c4c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a7cf205f-1a7d-4d0f-857d-4999321441e8",
                  "title": "Unicity tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testRental.js",
                  "file": "\\tests\\testRental.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not add a rental already in the database",
                      "fullTitle": "Rental Database insertion Unicity tests Should not add a rental already in the database",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Exact same object (same id)\nassert.throws(() => {\n\tdatabase.company.addRental(emp1);\n}, Error, \"A same rental is being added several times in the database\");\n// Same reference but different id\nassert.throws(() => {\n\tconst sameReferenceDifferentId = new Rental(rent1);\n\tdatabase.company.addRental(sameReferenceDifferentId);\n}, Error, \"A rental is being added in the database with an already added rental id\");\ndone();",
                      "err": {},
                      "uuid": "b8f69a1c-fa56-4779-b633-4ef7c6613a22",
                      "parentUUID": "a7cf205f-1a7d-4d0f-857d-4999321441e8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b8f69a1c-fa56-4779-b633-4ef7c6613a22"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1d7f51ba-b9b6-4eb8-a471-53567c382441",
              "title": "Database deletion",
              "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testRental.js",
              "file": "\\tests\\testRental.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "d8bba8b5-2327-4623-96c3-538d6a9b4d3e",
                  "title": "Retrieve tests",
                  "fullFile": "D:\\Travail\\Projets\\genie_log\\tests\\testRental.js",
                  "file": "\\tests\\testRental.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not return the deleted rental",
                      "fullTitle": "Rental Database deletion Retrieve tests Should not return the deleted rental",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "database.company.removeRental(rent1);\nassert.equal(database.company.getRental(rent1.getId()), undefined, \"The rental is not removed from the database when called for being deleted.\");\ndone();",
                      "err": {},
                      "uuid": "7f19ec7c-f1b2-421f-bb3d-075b9f5a511a",
                      "parentUUID": "d8bba8b5-2327-4623-96c3-538d6a9b4d3e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7f19ec7c-f1b2-421f-bb3d-075b9f5a511a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "tests/report",
        "reportFilename": "report"
      },
      "version": "6.2.0"
    }
  }
}