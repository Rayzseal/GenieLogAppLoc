{
  "stats": {
    "suites": 49,
    "tests": 77,
    "passes": 77,
    "pending": 0,
    "failures": 0,
    "start": "2023-01-01T20:20:11.304Z",
    "end": "2023-01-01T20:20:38.095Z",
    "duration": 26791,
    "testsRegistered": 77,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "89e3a477-e4ef-41c9-91c5-0c5c5723bb5e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "81123906-2f0b-4632-86fc-6ef36939947b",
          "title": "Selenium tests",
          "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testAdmin.js",
          "file": "\\tests\\testAdmin.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8a742a5f-1f77-4d65-930e-14b78a318d64",
              "title": "Home page",
              "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testAdmin.js",
              "file": "\\tests\\testAdmin.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: Start the test server in \"Home page\"",
                  "fullTitle": "Selenium tests Home page \"before all\" hook: Start the test server in \"Home page\"",
                  "timedOut": false,
                  "duration": 1196,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// HACK: Due to the way the server is made, there is no clean way to start a custom server for the tests.\n//       But what we can do is to start the server while overriding some values, and hope that it works.\nprocess.env.PORT = \"5555\";\n// Start server\nrequire(\"../index\");\n// Override server database with the test one.\ncopyFileSync(\"tests/db_original.json\", \"tests/db.json\");\nglobal.database = Database.load(\"tests/db.json\");\n// Wait, to make \"almost\" sure that the socket is bound.\nawait setTimeout(1000);",
                  "err": {},
                  "uuid": "562d650d-edaf-4721-8613-ac5f30f270d7",
                  "parentUUID": "8a742a5f-1f77-4d65-930e-14b78a318d64",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Verify title home page",
                  "fullTitle": "Selenium tests Home page Verify title home page",
                  "timedOut": false,
                  "duration": 1160,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Open browser\n\t\t\tlet driver = await new Builder().forBrowser(TEST_BROWSER).build();\n\t\t\ttry {\n\t\t\t\t// Open the website\n\t\t\t\tawait driver.get(\"http://localhost:5555\");\n\t\t\t\t//get the title of the page\n\t\t\t\tlet titlePage = await driver\n\t\t\t\t\t.getTitle();\n\t\t\t\t// Assert that the title page's text is the same as the text \"Page de connexion\"\n\t\t\t\tassert.equal(titlePage, \"Page de connexion\");\n\t\t\t} finally {\n\t\t\t\t// Closes the browser\n\t\t\t\tawait driver.quit();\n\t\t\t}",
                  "err": {},
                  "uuid": "5937742e-864e-4327-8bf3-4fb7c94adda0",
                  "parentUUID": "8a742a5f-1f77-4d65-930e-14b78a318d64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Admin connection",
                  "fullTitle": "Selenium tests Home page Admin connection",
                  "timedOut": false,
                  "duration": 1441,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Open browser\nlet driver = await new Builder().forBrowser(TEST_BROWSER).build();\ntry {\n\t// Open the website\n\tawait driver.get(\"http://localhost:5555\");\n\t// Find the input matricule box\n\tawait driver\n\t\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t\t.sendKeys(\"OCB1234\", Key.RETURN);\n\t// Find the input password box\n\tawait driver\n\t\t.findElement(By.xpath(\"//*[@id=\\\"password\\\"]\"))\n\t\t.sendKeys(\"Azertyuiop1234\", Key.RETURN);\n\t// Find the input password box\n\tlet note = await driver\n\t\t.findElement(By.xpath(\"//html/body/main/h6\"))\n\t\t.getText();\n\t// Assert that the title page's text is the same as the text \"(ADMINISTRATEUR)\"\n\tassert.equal(note, \"(ADMINISTRATEUR)\");\n} finally {\n\t// Closes the browser\n\tawait driver.quit();\n}",
                  "err": {},
                  "uuid": "a03e2546-b3a7-4bbf-8064-827d885e1a78",
                  "parentUUID": "8a742a5f-1f77-4d65-930e-14b78a318d64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Simple user connection",
                  "fullTitle": "Selenium tests Home page Simple user connection",
                  "timedOut": false,
                  "duration": 1310,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Open browser\nlet driver = await new Builder().forBrowser(TEST_BROWSER).build();\ntry {\n\t// Open the website\n\tawait driver.get(\"http://localhost:5555\");\n\t// Find the input matricule box\n\tawait driver\n\t\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t\t.sendKeys(\"JDZ5391\", Key.RETURN);\n\t// Find the input password box\n\tawait driver\n\t\t.findElement(By.xpath(\"//*[@id=\\\"password\\\"]\"))\n\t\t.sendKeys(\"Azertyuiop1234\", Key.RETURN);\n\t// Find the input password box\n\tlet note = await driver\n\t\t.findElement(By.xpath(\"//html/body/main/h6\"))\n\t\t.getText();\n\t// Assert that the title page's text is the same as the text \"(NON ADMINISTRATEUR)\"\n\tassert.equal(note, \"(NON ADMINISTRATEUR)\");\n} finally {\n\t// Closes the browser\n\tawait driver.quit();\n}",
                  "err": {},
                  "uuid": "a3babe19-8639-4e94-9eac-9b63f2e05c08",
                  "parentUUID": "8a742a5f-1f77-4d65-930e-14b78a318d64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5937742e-864e-4327-8bf3-4fb7c94adda0",
                "a03e2546-b3a7-4bbf-8064-827d885e1a78",
                "a3babe19-8639-4e94-9eac-9b63f2e05c08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3911,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d79d1482-9818-4a3d-8b87-deedffa7ba02",
              "title": "Admin home page",
              "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testAdmin.js",
              "file": "\\tests\\testAdmin.js",
              "beforeHooks": [],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"Admin home page\"",
                  "fullTitle": "Selenium tests Admin home page \"after all\" hook in \"Admin home page\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Make sure that the server doesn't outlive tests.\nglobal.serverHandle.close();",
                  "err": {},
                  "uuid": "8c492b9a-4e6e-4f6f-81f4-73df2ea1c937",
                  "parentUUID": "d79d1482-9818-4a3d-8b87-deedffa7ba02",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [],
              "suites": [
                {
                  "uuid": "45deb337-8f96-4b6c-b418-a86ae57732fd",
                  "title": "Employees",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testAdmin.js",
                  "file": "\\tests\\testAdmin.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"Employees\"",
                      "fullTitle": "Selenium tests Admin home page Employees \"before each\" hook in \"Employees\"",
                      "timedOut": false,
                      "duration": 1470,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Open browser\ndriver = await new Builder().forBrowser(TEST_BROWSER).build();\n// Open the website\nawait driver.get(\"http://localhost:5555\");\n// Find the input matricule box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t.sendKeys(\"OCB1234\", Key.RETURN);\n// Find the input password box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"password\\\"]\"))\n\t.sendKeys(\"Azertyuiop1234\", Key.RETURN);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);",
                      "err": {},
                      "uuid": "a52a6dbc-5050-4c0e-8b59-8faafda8ca0a",
                      "parentUUID": "45deb337-8f96-4b6c-b418-a86ae57732fd",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [
                    {
                      "title": "\"after each\" hook in \"Employees\"",
                      "fullTitle": "Selenium tests Admin home page Employees \"after each\" hook in \"Employees\"",
                      "timedOut": false,
                      "duration": 54,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await driver.quit();",
                      "err": {},
                      "uuid": "d50b8ce5-c952-46d3-92c7-d4fdc615250d",
                      "parentUUID": "45deb337-8f96-4b6c-b418-a86ae57732fd",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "tests": [
                    {
                      "title": "Number of employees",
                      "fullTitle": "Selenium tests Admin home page Employees Number of employees",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Count employees\nlet count = await driver\n\t\t\t\t\t.findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n\t\t\t\t\t.then(elements => elements.length);\n\n\t\t\t\t// Assert that the number of employees is equal to 3.\n\t\t\t\tassert.equal(count, 3);",
                      "err": {},
                      "uuid": "af93924b-ec20-4d1b-8f0d-cd260b170b32",
                      "parentUUID": "45deb337-8f96-4b6c-b418-a86ae57732fd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Add a new employee",
                      "fullTitle": "Selenium tests Admin home page Employees Add a new employee",
                      "timedOut": false,
                      "duration": 602,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Go to create a new employee page\nawait driver\n\t.findElement(By.xpath(\"//main/section/menu/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Find the input name box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"name\\\"]\"))\n\t.sendKeys(\"Nicolas\", Key.RETURN);\n// Find the input surname box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"surname\\\"]\"))\n\t.sendKeys(\"Machin\", Key.RETURN);\n// Find the input email box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"email\\\"]\"))\n\t.sendKeys(\"nicole.machin@mail.com\", Key.RETURN);\n// Find the input matricule box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t.sendKeys(\"POIU426\", Key.RETURN);\n// Find the input password box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"password\\\"]\"))\n\t.sendKeys(\"Azertyuiop1234\", Key.RETURN);\n//Add a new employee\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"save\\\"]\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                // Count the number of employees\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 4 employees\n                assert.equal(count, 4);",
                      "err": {},
                      "uuid": "d5029807-a4e0-4eb2-a5ba-0ca53c10f756",
                      "parentUUID": "45deb337-8f96-4b6c-b418-a86ae57732fd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Add an admin employee",
                      "fullTitle": "Selenium tests Admin home page Employees Add an admin employee",
                      "timedOut": false,
                      "duration": 665,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Go to create a new employee page\nawait driver\n\t.findElement(By.xpath(\"//main/section/menu/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Find the input name box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"name\\\"]\"))\n\t.sendKeys(\"Patrice\", Key.RETURN);\n// Find the input surname box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"surname\\\"]\"))\n\t.sendKeys(\"Truc\", Key.RETURN);\n// Find the input email box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"email\\\"]\"))\n\t.sendKeys(\"patrice.truc@mail.com\", Key.RETURN);\n// Find the input matricule box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t.sendKeys(\"PATU653\", Key.RETURN);\n// Find the input password box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"password\\\"]\"))\n\t.sendKeys(\"Azertyuiop1234\", Key.RETURN);\n// Find the input password box\nawait driver\n\t.findElement(By.xpath(\"//label[text()='Rôle sur la plateforme']\")).click();\n//Add a new employee\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"save\\\"]\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                // Count the number of employees\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 5 employees\n                assert.equal(count, 5);",
                      "err": {},
                      "uuid": "c7ce327c-50b7-4ce1-9dbe-0d660971a1c1",
                      "parentUUID": "45deb337-8f96-4b6c-b418-a86ae57732fd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Modify an employee",
                      "fullTitle": "Selenium tests Admin home page Employees Modify an employee",
                      "timedOut": false,
                      "duration": 668,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Click on the employee to modify\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on modify button\nawait driver\n\t.findElement(By.xpath(\"//main/section/section/div/section/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n//Find the input matricule box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t.clear();\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t.sendKeys(\"NEW6352\", Key.RETURN);\n//Modify the new employee\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"save\\\"]\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Get the text content of the employee's \"matricule\"\nlet text = await driver\n\t.findElement(By.xpath(\"//html/body/main/section/section/div/ul/li[3]/p\"))\n\t.getText();\n// Assert that the title page's text is the same as the text \"NEW6352\"\nassert.equal(text, \"NEW6352\");",
                      "err": {},
                      "uuid": "219defe4-31eb-4026-aa76-13f623421cc1",
                      "parentUUID": "45deb337-8f96-4b6c-b418-a86ae57732fd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Modify an employee --> employee is now an admin",
                      "fullTitle": "Selenium tests Admin home page Employees Modify an employee --> employee is now an admin",
                      "timedOut": false,
                      "duration": 613,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Click on the employee to modify\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on modify button\nawait driver\n\t.findElement(By.xpath(\"//main/section/section/div/section/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n//Change the role of the employee to admin\nawait driver\n\t.findElement(By.xpath(\"//label[text()='Rôle sur la plateforme']\")).click();\n//Modify the new employee\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"save\\\"]\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Get the text -- should be equal to 'administrateur'\nlet text = await driver\n\t.findElement(By.xpath(\"//html/body/main/section/section/div/ul/li[2]/p\"))\n\t.getText();\n// Assert that the title page's text is the same as the text \"Administrateur\"\nassert.equal(text, \"Administrateur\");",
                      "err": {},
                      "uuid": "8cb65c66-d15b-404c-adce-f3802a832162",
                      "parentUUID": "45deb337-8f96-4b6c-b418-a86ae57732fd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deleting an employee",
                      "fullTitle": "Selenium tests Admin home page Employees Deleting an employee",
                      "timedOut": false,
                      "duration": 371,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Click on the employee to delete\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on delete button\nawait driver\n\t.findElement(By.xpath(\"//main/section/section/div/section/ul/li[3]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on confirm button\nawait driver\n\t.findElement(By.xpath(\"//body/div/div/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                // Count the number of employees\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 4 employees\n                assert.equal(count, 4);",
                      "err": {},
                      "uuid": "f747e31b-9965-48b5-ab28-117953c67f63",
                      "parentUUID": "45deb337-8f96-4b6c-b418-a86ae57732fd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deleting admin employee",
                      "fullTitle": "Selenium tests Admin home page Employees Deleting admin employee",
                      "timedOut": false,
                      "duration": 347,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Click on the employee to delete\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on delete button\nawait driver\n\t.findElement(By.xpath(\"//main/section/section/div/section/ul/li[3]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on confirm button\nawait driver\n\t.findElement(By.xpath(\"//body/div/div/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                // Count the number of employees\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 3 employees\n                assert.equal(count, 3);",
                      "err": {},
                      "uuid": "dc31dfc6-55eb-40a7-9772-f7adfd600ce8",
                      "parentUUID": "45deb337-8f96-4b6c-b418-a86ae57732fd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deleting last admin employee",
                      "fullTitle": "Selenium tests Admin home page Employees Deleting last admin employee",
                      "timedOut": false,
                      "duration": 357,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Click on the employee to delete\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[2]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on delete button\nawait driver\n\t.findElement(By.xpath(\"//main/section/section/div/section/ul/li[3]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on confirm button\nawait driver\n\t.findElement(By.xpath(\"//body/div/div/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[3]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                // Count the number of employees\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 3 employees -- Since it's the last admin, it should not be deleted, so we should still have 3 employees as before\n                assert.equal(count, 3);",
                      "err": {},
                      "uuid": "39466e37-2608-4071-9b88-6e393f87942b",
                      "parentUUID": "45deb337-8f96-4b6c-b418-a86ae57732fd",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "af93924b-ec20-4d1b-8f0d-cd260b170b32",
                    "d5029807-a4e0-4eb2-a5ba-0ca53c10f756",
                    "c7ce327c-50b7-4ce1-9dbe-0d660971a1c1",
                    "219defe4-31eb-4026-aa76-13f623421cc1",
                    "8cb65c66-d15b-404c-adce-f3802a832162",
                    "f747e31b-9965-48b5-ab28-117953c67f63",
                    "dc31dfc6-55eb-40a7-9772-f7adfd600ce8",
                    "39466e37-2608-4071-9b88-6e393f87942b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3638,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "5d359100-baca-4cdf-bbd2-0ec575a66d17",
                  "title": "Materials",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testAdmin.js",
                  "file": "\\tests\\testAdmin.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"Materials\"",
                      "fullTitle": "Selenium tests Admin home page Materials \"before each\" hook in \"Materials\"",
                      "timedOut": false,
                      "duration": 1540,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Open browser\ndriver = await new Builder().forBrowser(TEST_BROWSER).build();\n// Open the website\nawait driver.get(\"http://localhost:5555\");\n// Find the input matricule box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"matricule\\\"]\"))\n\t.sendKeys(\"OCB1234\", Key.RETURN);\n// Find the input password box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"password\\\"]\"))\n\t.sendKeys(\"Azertyuiop1234\", Key.RETURN);\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[2]/a\"))\n\t.sendKeys(\"\", Key.ENTER);",
                      "err": {},
                      "uuid": "57e0df8b-656b-46c5-b7e3-782eff2fceff",
                      "parentUUID": "5d359100-baca-4cdf-bbd2-0ec575a66d17",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [
                    {
                      "title": "\"after each\" hook in \"Materials\"",
                      "fullTitle": "Selenium tests Admin home page Materials \"after each\" hook in \"Materials\"",
                      "timedOut": false,
                      "duration": 90,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await driver.quit();",
                      "err": {},
                      "uuid": "c4e2a1a6-84d6-4529-ade6-243dbfeece2c",
                      "parentUUID": "5d359100-baca-4cdf-bbd2-0ec575a66d17",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "tests": [
                    {
                      "title": "Number of material",
                      "fullTitle": "Selenium tests Admin home page Materials Number of material",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let count = await driver\n    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n    .then(elements => elements.length); // Assert that there are 3 materials\nassert.equal(count, 3);",
                      "err": {},
                      "uuid": "eff83ff4-26a4-49cd-a595-252033f8192f",
                      "parentUUID": "5d359100-baca-4cdf-bbd2-0ec575a66d17",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Adding a material",
                      "fullTitle": "Selenium tests Admin home page Materials Adding a material",
                      "timedOut": false,
                      "duration": 677,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Go to create a new material page\nawait driver\n\t.findElement(By.xpath(\"//main/section/menu/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Find the input title box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"title\\\"]\"))\n\t.sendKeys(\"Iphone10\", Key.RETURN);\n// Find the input version box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"version\\\"]\"))\n\t.sendKeys(\"V1.0\", Key.RETURN);\n// Find the input image box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"image\\\"]\"))\n\t.sendKeys(\"https://www.shutterstock.com/image-photo/new-york-usa-may-302018-260nw-1105180928.jpg\", Key.RETURN);\n// Find the input reference box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"reference\\\"]\"))\n\t.sendKeys(\"AP004\", Key.RETURN);\n// Find the input phone number box\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"phoneNumber\\\"]\"))\n\t.sendKeys(\"0299765387\", Key.RETURN);\n//Add a new material\nawait driver\n\t.findElement(By.xpath(\"//*[@id=\\\"save\\\"]\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Count the number of elements\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[2]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 4 materials\n                assert.equal(count, 4);",
                      "err": {},
                      "uuid": "72d82ea7-4393-4004-a2fc-d8e30c2024db",
                      "parentUUID": "5d359100-baca-4cdf-bbd2-0ec575a66d17",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deleting a material",
                      "fullTitle": "Selenium tests Admin home page Materials Deleting a material",
                      "timedOut": false,
                      "duration": 446,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Click on the material to delete\nawait driver\n\t.findElement(By.xpath(\"//main/section/ul/li[4]/div[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on delete button\nawait driver\n\t.findElement(By.xpath(\"//main/section/section/div/section/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n// Click on confirm button\nawait driver\n\t.findElement(By.xpath(\"//body/div/div/ul/li[2]/button\"))\n\t.sendKeys(\"\", Key.ENTER);\n//Count the new number of materials\nawait driver\n\t.findElement(By.xpath(\"//html/body/header/menu/li[2]/a\"))\n\t.sendKeys(\"\", Key.ENTER);\n\n                let count = await driver\n                    .findElements(By.xpath(\"//html/body/main/section/ul/li\"))\n                    .then(elements => elements.length); // Assert that there are 3 materials\n                assert.equal(count, 3);",
                      "err": {},
                      "uuid": "aea490b1-ac52-4f66-ad98-2915d9c6d60e",
                      "parentUUID": "5d359100-baca-4cdf-bbd2-0ec575a66d17",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "eff83ff4-26a4-49cd-a595-252033f8192f",
                    "72d82ea7-4393-4004-a2fc-d8e30c2024db",
                    "aea490b1-ac52-4f66-ad98-2915d9c6d60e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1137,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b7886a43-305c-45b0-9229-0520f09f2ff3",
          "title": "Company",
          "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testCompany.js",
          "file": "\\tests\\testCompany.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f9cd5e8c-5250-425c-8409-68047b1a9108",
              "title": "Object creation",
              "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testCompany.js",
              "file": "\\tests\\testCompany.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "ec092c81-b958-47d2-b00b-41dcac1e1112",
                  "title": "Creating a company",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testCompany.js",
                  "file": "\\tests\\testCompany.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create an empty company",
                      "fullTitle": "Company Object creation Creating a company Should create an empty company",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const comp = new Company({});\nassert.equal(comp.getRentals().length, 0, \"The list of rentals must contains no element.\");\nassert.equal(comp.getEmployees().length, 0, \"The list of employees must contains no element.\");\nassert.equal(comp.getMaterials().length, 0, \"The list of materials must contains no element.\");\ndone();",
                      "err": {},
                      "uuid": "2875a3af-a8b0-4aa4-a2fc-9725b7463a4a",
                      "parentUUID": "ec092c81-b958-47d2-b00b-41dcac1e1112",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the company with objects in it",
                      "fullTitle": "Company Object creation Creating a company Should create the company with objects in it",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nconst emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nconst rent1 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: new Date(\"2023-02-01\"),\n\tendingDate: new Date(\"2023-03-01\")\n});\nconst rent2 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: new Date(\"2024-02-01\"),\n\tendingDate: new Date(\"2025-03-01\")\n});\nconst comp = new Company({});\ncomp.addEmployee(emp1);\ncomp.addMaterial(mat1);\ncomp.addRental(rent1);\ncomp.addRental(rent2);\nassert.equal(comp.getRentals().length, 2, \"The list of rentals must contains 2 elements.\");\nassert.equal(comp.getEmployees().length, 1, \"The list of employees must contains 1 element.\");\nassert.equal(comp.getMaterials().length, 1, \"The list of materials must contains 1 element.\");\ndone();",
                      "err": {},
                      "uuid": "c3014691-40c9-469f-950f-1165062787f1",
                      "parentUUID": "ec092c81-b958-47d2-b00b-41dcac1e1112",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2875a3af-a8b0-4aa4-a2fc-9725b7463a4a",
                    "c3014691-40c9-469f-950f-1165062787f1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a4e57826-4175-4c68-8ae4-b885f0277e09",
                  "title": "Adding elements to a company",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testCompany.js",
                  "file": "\\tests\\testCompany.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Company with objects in it, adding multiple rents",
                      "fullTitle": "Company Object creation Adding elements to a company Company with objects in it, adding multiple rents",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nconst mat2 = new Material({\n\ttitle: \"Samsung galaxy s8\",\n\tversion: \"v123\",\n\treference: \"AN002\"\n});\nconst emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nconst rent1 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: new Date(\"2023-02-01\"),\n\tendingDate: new Date(\"2023-03-01\")\n});\nconst rent2 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: new Date(\"2024-02-01\"),\n\tendingDate: new Date(\"2025-03-01\")\n});\nconst rent3 = new Rental({\n\temployee: emp1,\n\tmaterial: mat2,\n\tstartingDate: new Date(\"2024-02-01\"),\n\tendingDate: new Date(\"2025-03-01\")\n});\nconst comp = new Company({});\ncomp.addEmployee(emp1);\ncomp.addMaterial(mat1);\ncomp.addMaterial(mat2);\ncomp.addRental(rent1);\ncomp.addRental(rent2);\ncomp.addRental(rent3);\nassert.equal(comp.getRentals().length, 3, \"The list of rentals must contains 3 elements.\");\nassert.equal(comp.getEmployees().length, 1, \"The list of employees must contains 1 element.\");\nassert.equal(comp.getMaterials().length, 2, \"The list of materials must contains 2 elements.\");\ndone();",
                      "err": {},
                      "uuid": "d877f6c5-9a57-4d3d-9d78-ffe6ab656cf3",
                      "parentUUID": "a4e57826-4175-4c68-8ae4-b885f0277e09",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Company with objects in it, adding multiple rents (error case)",
                      "fullTitle": "Company Object creation Adding elements to a company Company with objects in it, adding multiple rents (error case)",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\tversion: \"v24587\",\n\t\t\t\t\treference: \"AN001\"\n\t\t\t\t});\n\t\t\t\tconst emp1 = new Employee({\n\t\t\t\t\tname: \"Nicolas\",\n\t\t\t\t\tsurname: \"Martin\",\n\t\t\t\t\temail: \"nicolas.martin@mail.com\",\n\t\t\t\t\tpassword: \"Azertyuiop1234\",\n\t\t\t\t\tpersonnalNumber: \"ABCD123\"\n\t\t\t\t});\n\t\t\t\tconst rent1 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2023-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2023-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent2 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent3 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst comp = new Company({});\n\t\t\t\tassert.throws(() => {\n\t\t\t\t\tcomp.addEmployee(emp1);\n\t\t\t\t\tcomp.addMaterial(mat1);\n\t\t\t\t\tcomp.addRental(rent1);\n\t\t\t\t\tcomp.addRental(rent2);\n\t\t\t\t\t//Should cause the Error, since the material is already located at this time\n\t\t\t\t\tcomp.addRental(rent3);\n\t\t\t\t}, Error, \"Someone is trying to rent a material that is already rented during this period\");\n\t\t\t\tdone();",
                      "err": {},
                      "uuid": "92211ad2-1d81-4975-bf72-da637856aef1",
                      "parentUUID": "a4e57826-4175-4c68-8ae4-b885f0277e09",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d877f6c5-9a57-4d3d-9d78-ffe6ab656cf3",
                    "92211ad2-1d81-4975-bf72-da637856aef1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "40231ea1-527a-4c2e-981f-97bb54999437",
                  "title": "Deleting elements from a company",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testCompany.js",
                  "file": "\\tests\\testCompany.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deleting rentals (not active)",
                      "fullTitle": "Company Object creation Deleting elements from a company Deleting rentals (not active)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\tversion: \"v24587\",\n\t\t\t\t\treference: \"AN001\"\n\t\t\t\t});\n\t\t\t\tconst mat2 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s8\",\n\t\t\t\t\tversion: \"v123\",\n\t\t\t\t\treference: \"AN002\"\n\t\t\t\t});\n\t\t\t\tconst emp1 = new Employee({\n\t\t\t\t\tname: \"Nicolas\",\n\t\t\t\t\tsurname: \"Martin\",\n\t\t\t\t\temail: \"nicolas.martin@mail.com\",\n\t\t\t\t\tpassword: \"Azertyuiop1234\",\n\t\t\t\t\tpersonnalNumber: \"ABCD123\"\n\t\t\t\t});\n\t\t\t\tconst rent1 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2023-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2023-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent2 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent3 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat2,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst comp = new Company({});\n\t\t\t\tcomp.addEmployee(emp1);\n\t\t\t\tcomp.addMaterial(mat1);\n\t\t\t\tcomp.addMaterial(mat2);\n\t\t\t\tcomp.addRental(rent1);\n\t\t\t\tcomp.addRental(rent2);\n\t\t\t\tcomp.addRental(rent3);\n\t\t\t\tassert.equal(comp.getRentals().length, 3, \"The list of rentals must contains 3 elements.\");\n\t\t\t\tcomp.removeRental(rent1);\n\t\t\t\tcomp.removeRental(rent2);\n\t\t\t\tcomp.removeRental(rent3);\n\t\t\t\tassert.equal(comp.getRentals().length, 0, \"The list of rentals must contains no element.\");\n\t\t\t\tdone();",
                      "err": {},
                      "uuid": "1201547f-f452-4f96-a464-8a51fd5505ab",
                      "parentUUID": "40231ea1-527a-4c2e-981f-97bb54999437",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deleting employees (not active)",
                      "fullTitle": "Company Object creation Deleting elements from a company Deleting employees (not active)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\tversion: \"v24587\",\n\t\t\t\t\treference: \"AN001\"\n\t\t\t\t});\n\t\t\t\tconst mat2 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s8\",\n\t\t\t\t\tversion: \"v123\",\n\t\t\t\t\treference: \"AN002\"\n\t\t\t\t});\n\t\t\t\tconst emp1 = new Employee({\n\t\t\t\t\tname: \"Nicolas\",\n\t\t\t\t\tsurname: \"Martin\",\n\t\t\t\t\temail: \"nicolas.martin@mail.com\",\n\t\t\t\t\tpassword: \"Azertyuiop1234\",\n\t\t\t\t\tpersonnalNumber: \"ABCD123\"\n\t\t\t\t});\n\t\t\t\tconst rent1 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2023-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2023-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent2 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent3 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat2,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst comp = new Company({});\n\t\t\t\tcomp.addEmployee(emp1);\n\t\t\t\tcomp.addMaterial(mat1);\n\t\t\t\tcomp.addMaterial(mat2);\n\t\t\t\tcomp.addRental(rent1);\n\t\t\t\tcomp.addRental(rent2);\n\t\t\t\tcomp.addRental(rent3);\n\t\t\t\tassert.equal(comp.getRentals().length, 3, \"The list of rentals must contains 3 elements.\");\n\t\t\t\tassert.equal(comp.getEmployees().length, 1, \"The list of employees must contains 1 element.\");\n\t\t\t\tcomp.removeEmployee(emp1);\n\t\t\t\tassert.equal(comp.getEmployees().length, 0, \"The list of employees must contains no element.\");\n\t\t\t\tassert.equal(comp.getRentals().length, 0, \"The list of rentals must contains no element.\");\n\t\t\t\tdone();",
                      "err": {},
                      "uuid": "33fa1355-29f1-4b87-9d32-e6d141d97aec",
                      "parentUUID": "40231ea1-527a-4c2e-981f-97bb54999437",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deleting materials (not active)",
                      "fullTitle": "Company Object creation Deleting elements from a company Deleting materials (not active)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\tversion: \"v24587\",\n\t\t\t\t\treference: \"AN001\"\n\t\t\t\t});\n\t\t\t\tconst mat2 = new Material({\n\t\t\t\t\ttitle: \"Samsung galaxy s8\",\n\t\t\t\t\tversion: \"v123\",\n\t\t\t\t\treference: \"AN002\"\n\t\t\t\t});\n\t\t\t\tconst emp1 = new Employee({\n\t\t\t\t\tname: \"Nicolas\",\n\t\t\t\t\tsurname: \"Martin\",\n\t\t\t\t\temail: \"nicolas.martin@mail.com\",\n\t\t\t\t\tpassword: \"Azertyuiop1234\",\n\t\t\t\t\tpersonnalNumber: \"ABCD123\"\n\t\t\t\t});\n\t\t\t\tconst rent1 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2023-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2023-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent2 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat1,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst rent3 = new Rental({\n\t\t\t\t\temployee: emp1,\n\t\t\t\t\tmaterial: mat2,\n\t\t\t\t\tstartingDate: new Date(\"2024-02-01\"),\n\t\t\t\t\tendingDate: new Date(\"2025-03-01\")\n\t\t\t\t});\n\t\t\t\tconst comp = new Company({});\n\t\t\t\tcomp.addEmployee(emp1);\n\t\t\t\tcomp.addMaterial(mat1);\n\t\t\t\tcomp.addMaterial(mat2);\n\t\t\t\tcomp.addRental(rent1);\n\t\t\t\tcomp.addRental(rent2);\n\t\t\t\tcomp.addRental(rent3);\n\t\t\t\tassert.equal(comp.getRentals().length, 3, \"The list of rentals must contains 3 elements.\");\n\t\t\t\tassert.equal(comp.getMaterials().length, 2, \"The list of materials must contains 2 elements.\");\n\t\t\t\tcomp.removeMaterial(mat1);\n\t\t\t\tcomp.removeMaterial(mat2);\n\t\t\t\tassert.equal(comp.getRentals().length, 0, \"The list of rentals must contains no element.\");\n\t\t\t\tassert.equal(comp.getMaterials().length, 0, \"The list of materials must contains no element.\");\n\t\t\t\tdone();",
                      "err": {},
                      "uuid": "a0eace8b-8acc-4952-9261-ff21a70b49c5",
                      "parentUUID": "40231ea1-527a-4c2e-981f-97bb54999437",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deleting employees, materials & rents (active)",
                      "fullTitle": "Company Object creation Deleting elements from a company Deleting employees, materials & rents (active)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const today = new Date(new Date().setHours(1, 0, 0, 0));\nconst mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nconst mat2 = new Material({\n\ttitle: \"Samsung galaxy s8\",\n\tversion: \"v123\",\n\treference: \"AN002\"\n});\nconst mat3 = new Material({\n\ttitle: \"Samsung galaxy s9\",\n\tversion: \"v-48\",\n\treference: \"AN003\"\n});\nconst emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nconst emp2 = new Employee({\n\tname: \"Robert\",\n\tsurname: \"Durant\",\n\temail: \"robert.durant@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABC4567\"\n});\nconst emp3 = new Employee({\n\tname: \"Jean\",\n\tsurname: \"Valjean\",\n\temail: \"jean.valjean@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"VBN1234\"\n});\nconst rent1 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: today,\n\tendingDate: new Date(\"2023-03-01\")\n});\nconst rent2 = new Rental({\n\temployee: emp2,\n\tmaterial: mat2,\n\tstartingDate: today,\n\tendingDate: new Date(\"2024-03-01\")\n});\nconst rent3 = new Rental({\n\temployee: emp3,\n\tmaterial: mat3,\n\tstartingDate: today,\n\tendingDate: new Date(\"2024-03-01\")\n});\nconst comp = new Company({});\ncomp.addEmployee(emp1);\ncomp.addEmployee(emp2);\ncomp.addEmployee(emp3);\ncomp.addMaterial(mat1);\ncomp.addMaterial(mat2);\ncomp.addMaterial(mat3);\ncomp.addRental(rent1);\ncomp.addRental(rent2);\ncomp.addRental(rent3);\nassert.throws(() => {\n\tcomp.removeRental(rent3);\n}, Error, \"We cannot remove an active rent\");\nassert.throws(() => {\n\tcomp.removeMaterial(mat1);\n}, Error, \"We cannot remove a material with an active rent\");\nassert.throws(() => {\n\tcomp.removeEmployee(emp2);\n}, Error, \"We cannot remove an employee who has an active rent\");\nassert.equal(comp.getEmployees().length, 3, \"The list of employees must contains 3 elements.\");\nassert.equal(comp.getMaterials().length, 3, \"The list of materials must contains 3 elements.\");\nassert.equal(comp.getRentals().length, 3, \"The list of rentals must contains 3 elements.\");\ncomp.removeMaterial(mat1, true);\nassert.equal(comp.getMaterials().length, 2, \"The list of materials must contains 2 elements.\");\nassert.equal(comp.getRentals().length, 2, \"The list of rentals must contains 2 elements.\");\ncomp.removeEmployee(emp2, true);\nassert.equal(comp.getEmployees().length, 2, \"The list of employees must contains 2 elements.\");\nassert.equal(comp.getRentals().length, 1, \"The list of rentals must contains 1 element.\");\ncomp.removeRental(rent3, true);\nassert.equal(comp.getRentals().length, 0, \"The list of rentals must contains no element.\");\ndone();",
                      "err": {},
                      "uuid": "6cb2dfbc-85ca-4f9d-887a-82414e20f0fe",
                      "parentUUID": "40231ea1-527a-4c2e-981f-97bb54999437",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1201547f-f452-4f96-a464-8a51fd5505ab",
                    "33fa1355-29f1-4b87-9d32-e6d141d97aec",
                    "a0eace8b-8acc-4952-9261-ff21a70b49c5",
                    "6cb2dfbc-85ca-4f9d-887a-82414e20f0fe"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bf7fe545-0f23-4dec-bc4b-dbf2d47643e9",
              "title": "Database tests",
              "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testCompany.js",
              "file": "\\tests\\testCompany.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "7cd49b13-d643-4501-b392-b6c138a684cd",
                  "title": "Database insertion",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testCompany.js",
                  "file": "\\tests\\testCompany.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "4d70b9df-8e78-4e09-9038-76adfd341769",
                      "title": "Retrieve tests",
                      "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testCompany.js",
                      "file": "\\tests\\testCompany.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "Should return the corrects number of elements added",
                          "fullTitle": "Company Database tests Database insertion Retrieve tests Should return the corrects number of elements added",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "assert.equal(database.company.getEmployees().length, 3, \"The list of employees must contains 3 elements.\");\nassert.equal(database.company.getMaterials().length, 3, \"The list of materials must contains 3 elements.\");\nassert.equal(database.company.getRentals().length, 3, \"The list of rentals must contains 3 elements.\");\ndone();",
                          "err": {},
                          "uuid": "3354f4e1-9f54-44d9-bff0-9f05e14c0e1d",
                          "parentUUID": "4d70b9df-8e78-4e09-9038-76adfd341769",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "3354f4e1-9f54-44d9-bff0-9f05e14c0e1d"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    },
                    {
                      "uuid": "d6a3c4d4-0eed-4b7a-a98e-26db883bda13",
                      "title": "Deletion tests",
                      "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testCompany.js",
                      "file": "\\tests\\testCompany.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "Should return the corrects number of elements after we deleted some",
                          "fullTitle": "Company Database tests Database insertion Deletion tests Should return the corrects number of elements after we deleted some",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "database.company.removeRental(rent1);\ndatabase.company.removeEmployee(emp2); //--> deletes rent refereced by emp2\ndatabase.company.removeMaterial(mat3); //--> deletes rent refereced by mat3\nassert.equal(database.company.getEmployees().length, 2, \"The list of employees must contains 2 elements.\");\nassert.equal(database.company.getMaterials().length, 2, \"The list of materials must contains 2 elements.\");\nassert.equal(database.company.getRentals().length, 0, \"The list of rentals must contains no element.\");\ndone();",
                          "err": {},
                          "uuid": "f6e8723e-02ed-499b-bd30-12be0a13c5a6",
                          "parentUUID": "d6a3c4d4-0eed-4b7a-a98e-26db883bda13",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f6e8723e-02ed-499b-bd30-12be0a13c5a6"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8db23309-9870-4ed0-9fc5-2d8380ccb34e",
          "title": "Employee",
          "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testEmployee.js",
          "file": "\\tests\\testEmployee.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0c8a557f-2f46-483a-b983-4af4ebab3611",
              "title": "Object creation",
              "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testEmployee.js",
              "file": "\\tests\\testEmployee.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "b4fcf2b1-cc89-46a0-b375-a907718ae9f4",
                  "title": "Id tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the employee without having to enter an id",
                      "fullTitle": "Employee Object creation Id tests Should create the employee without having to enter an id",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getId(), \"string\", \"The id must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "b502c7a4-d07b-4516-9e4e-6f03656bd2fa",
                      "parentUUID": "b4fcf2b1-cc89-46a0-b375-a907718ae9f4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b502c7a4-d07b-4516-9e4e-6f03656bd2fa"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "5d5bfeaa-2361-4d5e-aba2-82303563f0c2",
                  "title": "Name tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the employee with a standard name (no space or special characters)",
                      "fullTitle": "Employee Object creation Name tests Should create the employee with a standard name (no space or special characters)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getName(), \"string\", \"The name must be a String.\");\nassert.equal(emp1.getName(), \"Nicolas\", \"A standard name should be accepted.\");\ndone();",
                      "err": {},
                      "uuid": "7d9e134b-e7da-496c-aa53-dd4b03d79f60",
                      "parentUUID": "5d5bfeaa-2361-4d5e-aba2-82303563f0c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with a name containing a space",
                      "fullTitle": "Employee Object creation Name tests Should create the employee with a name containing a space",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Jean Jacques\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(emp1.getName(), \"Jean Jacques\", \"A name containing a space characted should be accepted.\");\ndone();",
                      "err": {},
                      "uuid": "4d930be1-f8ff-4895-b57b-6f06cde68850",
                      "parentUUID": "5d5bfeaa-2361-4d5e-aba2-82303563f0c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with a name containing an hyphen",
                      "fullTitle": "Employee Object creation Name tests Should create the employee with a name containing an hyphen",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Jean-Jacques\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(emp1.getName(), \"Jean-Jacques\", \"A name containing hyphen should be accepted.\");\ndone();",
                      "err": {},
                      "uuid": "fb38ed4a-4f97-45b9-885b-c43b6027f943",
                      "parentUUID": "5d5bfeaa-2361-4d5e-aba2-82303563f0c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with an accentuated name",
                      "fullTitle": "Employee Object creation Name tests Should create the employee with an accentuated name",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nîcolàs\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(emp1.getName(), \"Nîcolàs\", \"A name containing accentuated characted should be accepted.\");\ndone();",
                      "err": {},
                      "uuid": "fbd3e79f-dd0c-43a2-8aa0-ddfed21cd24c",
                      "parentUUID": "5d5bfeaa-2361-4d5e-aba2-82303563f0c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect name (format)",
                      "fullTitle": "Employee Object creation Name tests Should throw an error : employee with an incorrect name (format)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas/\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of name\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of name (empty string)\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"1234\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of name (contains only numbers)\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \" \",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of name (only spaces)\");\ndone();",
                      "err": {},
                      "uuid": "40136d0e-9fc0-4804-8eba-bc7f30cdc87f",
                      "parentUUID": "5d5bfeaa-2361-4d5e-aba2-82303563f0c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect name (size)",
                      "fullTitle": "Employee Object creation Name tests Should throw an error : employee with an incorrect name (size)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of name : too long\");\ndone();",
                      "err": {},
                      "uuid": "bcc80efd-9d5d-490f-9468-89a4b1963a65",
                      "parentUUID": "5d5bfeaa-2361-4d5e-aba2-82303563f0c2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7d9e134b-e7da-496c-aa53-dd4b03d79f60",
                    "4d930be1-f8ff-4895-b57b-6f06cde68850",
                    "fb38ed4a-4f97-45b9-885b-c43b6027f943",
                    "fbd3e79f-dd0c-43a2-8aa0-ddfed21cd24c",
                    "40136d0e-9fc0-4804-8eba-bc7f30cdc87f",
                    "bcc80efd-9d5d-490f-9468-89a4b1963a65"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fb08810b-508c-4e35-b9fc-b60fde07ec42",
                  "title": "Surname tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the employee with a correct surname",
                      "fullTitle": "Employee Object creation Surname tests Should create the employee with a correct surname",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getSurname(), \"string\", \"The surname must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "9ec7cf9f-5ec4-4a05-a9bc-7af2578c8485",
                      "parentUUID": "fb08810b-508c-4e35-b9fc-b60fde07ec42",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with a correct surname",
                      "fullTitle": "Employee Object creation Surname tests Should create the employee with a correct surname",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin Jean\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getSurname(), \"string\", \"The surname must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "ad5d9ce4-b8e5-4ce6-8a7d-645908fa216e",
                      "parentUUID": "fb08810b-508c-4e35-b9fc-b60fde07ec42",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with a correct surname",
                      "fullTitle": "Employee Object creation Surname tests Should create the employee with a correct surname",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin-Jean\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getSurname(), \"string\", \"The surname must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "e33cf83b-3ff4-4d5d-ad37-2b1c190064f8",
                      "parentUUID": "fb08810b-508c-4e35-b9fc-b60fde07ec42",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with a correct surname",
                      "fullTitle": "Employee Object creation Surname tests Should create the employee with a correct surname",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Màrtîn\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getSurname(), \"string\", \"The surname must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "c88a1309-a512-453f-881d-5a7ec2990638",
                      "parentUUID": "fb08810b-508c-4e35-b9fc-b60fde07ec42",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect surname (format)",
                      "fullTitle": "Employee Object creation Surname tests Should throw an error : employee with an incorrect surname (format)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin/\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of surname\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of surname (empty surname)\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"1234\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of surname (composed only of numbers)\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \" \",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of surname (only spaces)\");\ndone();",
                      "err": {},
                      "uuid": "d21216d6-268d-45a4-b6b4-1ef3071a0752",
                      "parentUUID": "fb08810b-508c-4e35-b9fc-b60fde07ec42",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect surname (size)",
                      "fullTitle": "Employee Object creation Surname tests Should throw an error : employee with an incorrect surname (size)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martinnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of surname : too long\");\ndone();",
                      "err": {},
                      "uuid": "ffca25c5-9f5e-4799-b641-a3ed3ea1da2e",
                      "parentUUID": "fb08810b-508c-4e35-b9fc-b60fde07ec42",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9ec7cf9f-5ec4-4a05-a9bc-7af2578c8485",
                    "ad5d9ce4-b8e5-4ce6-8a7d-645908fa216e",
                    "e33cf83b-3ff4-4d5d-ad37-2b1c190064f8",
                    "c88a1309-a512-453f-881d-5a7ec2990638",
                    "d21216d6-268d-45a4-b6b4-1ef3071a0752",
                    "ffca25c5-9f5e-4799-b641-a3ed3ea1da2e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f10210b0-97ea-4aa9-a97b-2d5d17e8ffcb",
                  "title": "Email tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the employee with a correct email",
                      "fullTitle": "Employee Object creation Email tests Should create the employee with a correct email",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getEmail(), \"string\", \"The email must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "929483ce-0a0a-45c9-b5ec-3e1b495f413e",
                      "parentUUID": "f10210b0-97ea-4aa9-a97b-2d5d17e8ffcb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the employee with a correct email (containing special characters)",
                      "fullTitle": "Employee Object creation Email tests Should create the employee with a correct email (containing special characters)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nîcolàs.m/artin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getEmail(), \"string\", \"The email must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "5d74fb7a-dd05-4d0d-b0b6-04ceb20c56a3",
                      "parentUUID": "f10210b0-97ea-4aa9-a97b-2d5d17e8ffcb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect mail (missing  or incorrect characters)",
                      "fullTitle": "Employee Object creation Email tests Should throw an error : employee with an incorrect mail (missing  or incorrect characters)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martinmail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of email : missing @\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas@martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of email : too many @\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mailcom\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of email : missing extension\");\ndone();",
                      "err": {},
                      "uuid": "2dd72efa-4d46-4390-9c61-29df23febeef",
                      "parentUUID": "f10210b0-97ea-4aa9-a97b-2d5d17e8ffcb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "929483ce-0a0a-45c9-b5ec-3e1b495f413e",
                    "5d74fb7a-dd05-4d0d-b0b6-04ceb20c56a3",
                    "2dd72efa-4d46-4390-9c61-29df23febeef"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8c4d94f3-4b0f-4bd0-980c-6e942f8ca14a",
                  "title": "Password tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the employee with a correct password",
                      "fullTitle": "Employee Object creation Password tests Should create the employee with a correct password",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof (emp1), \"object\", \"Should be an object.\");\ndone();",
                      "err": {},
                      "uuid": "cea13ce7-dea9-458e-9060-bd3bdb13e097",
                      "parentUUID": "8c4d94f3-4b0f-4bd0-980c-6e942f8ca14a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect password (missing characters)",
                      "fullTitle": "Employee Object creation Password tests Should throw an error : employee with an incorrect password (missing characters)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martinmail.com\",\n\t\tpassword: \"azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of password : missing uppercase letter\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martinmail.com\",\n\t\tpassword: \"Azertyuiop\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of password : missing numbers\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martinmail.com\",\n\t\tpassword: \"Azer12\",\n\t\tpersonnalNumber: \"ABCD123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of password : too short\");\ndone();",
                      "err": {},
                      "uuid": "02da750a-7510-4fb5-9074-09e6e6a64432",
                      "parentUUID": "8c4d94f3-4b0f-4bd0-980c-6e942f8ca14a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cea13ce7-dea9-458e-9060-bd3bdb13e097",
                    "02da750a-7510-4fb5-9074-09e6e6a64432"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f6158df0-2824-41e4-8fee-3317a766a3d2",
                  "title": "PersonnalNumber tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the employee with a correct personnal number",
                      "fullTitle": "Employee Object creation PersonnalNumber tests Should create the employee with a correct personnal number",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.equal(typeof emp1.getPersonnalNumber(), \"string\", \"The personnal number must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "f09ed70a-db63-4077-af9a-189524112254",
                      "parentUUID": "f6158df0-2824-41e4-8fee-3317a766a3d2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect personnal number (format)",
                      "fullTitle": "Employee Object creation PersonnalNumber tests Should throw an error : employee with an incorrect personnal number (format)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"AB/D123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of personnal number : special characters\");\ndone();",
                      "err": {},
                      "uuid": "d517184b-9a1f-4d32-8692-5c682f8d0836",
                      "parentUUID": "f6158df0-2824-41e4-8fee-3317a766a3d2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error : employee with an incorrect personnal number (size)",
                      "fullTitle": "Employee Object creation PersonnalNumber tests Should throw an error : employee with an incorrect personnal number (size)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABC123\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of personnal number : too short\");\nassert.throws(() => {\n\tnew Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"ABCD1234\"\n\t});\n}, Error, \"The employee is being created with an incorrect format of personnal number : too long\");\ndone();",
                      "err": {},
                      "uuid": "4171d4f5-f1bf-48eb-a158-576affa0b4d3",
                      "parentUUID": "f6158df0-2824-41e4-8fee-3317a766a3d2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f09ed70a-db63-4077-af9a-189524112254",
                    "d517184b-9a1f-4d32-8692-5c682f8d0836",
                    "4171d4f5-f1bf-48eb-a158-576affa0b4d3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c726b44f-3db2-4e60-9403-e2e8c5977d4c",
              "title": "Database insertion",
              "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testEmployee.js",
              "file": "\\tests\\testEmployee.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Database insertion\"",
                  "fullTitle": "Employee Database insertion \"before all\" hook in \"Database insertion\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "database.company.addEmployee(emp1)",
                  "err": {},
                  "uuid": "49ab3c73-f070-4043-9dba-10ecda5ea796",
                  "parentUUID": "c726b44f-3db2-4e60-9403-e2e8c5977d4c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "1625b0ec-ee63-4dae-a83d-089c31c6abed",
                  "title": "Retrieve tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should return the employee added",
                      "fullTitle": "Employee Database insertion Retrieve tests Should return the employee added",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const retrievedEmployee = database.company.getEmployee(emp1.getId());\nassert.equal(retrievedEmployee, emp1, \"An added employee is returned by the getter\");\ndone();",
                      "err": {},
                      "uuid": "ebead4a8-2718-48ca-855e-afa97a61b5a4",
                      "parentUUID": "1625b0ec-ee63-4dae-a83d-089c31c6abed",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ebead4a8-2718-48ca-855e-afa97a61b5a4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "828400ee-4bae-4edb-928b-39734bdca3de",
                  "title": "Unicity tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not add a employee already in the database",
                      "fullTitle": "Employee Database insertion Unicity tests Should not add a employee already in the database",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Exact same object (same id)\nassert.throws(() => {\n\tdatabase.company.addEmployee(emp1);\n}, Error, \"A same employee is being added several times in the database\");\n// Same reference but different id\nassert.throws(() => {\n\tconst sameReferenceDifferentId = new Employee(emp1);\n\tdatabase.company.addEmployee(sameReferenceDifferentId);\n}, Error, \"An employee is being added in the database with an already added employee id\");\nassert.throws(() => {\n\tconst emp2 = new Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: \"nicolas.martin@mail.com\",\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: emp1.getPersonnalNumber()\n\t});\n\tdatabase.company.addEmployee(emp2);\n}, Error, \"An employee with an already used personnal number is being added to the company\");\nassert.throws(() => {\n\tconst emp3 = new Employee({\n\t\tname: \"Nicolas\",\n\t\tsurname: \"Martin\",\n\t\temail: emp1.getEmail(),\n\t\tpassword: \"Azertyuiop1234\",\n\t\tpersonnalNumber: \"12345AB\"\n\t});\n\tdatabase.company.addEmployee(emp3);\n}, Error, \"An employee with an already used email is being added to the company\");\ndone();",
                      "err": {},
                      "uuid": "54708943-2ef7-4b96-a8e8-29176be51d5f",
                      "parentUUID": "828400ee-4bae-4edb-928b-39734bdca3de",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "54708943-2ef7-4b96-a8e8-29176be51d5f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9a155072-4ba7-45a8-ae71-33742a51cb43",
              "title": "Database deletion",
              "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testEmployee.js",
              "file": "\\tests\\testEmployee.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Database deletion\"",
                  "fullTitle": "Employee Database deletion \"before all\" hook in \"Database deletion\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "database.company.addEmployee(emp1)",
                  "err": {},
                  "uuid": "308bed1a-4f85-49b9-8523-bc5cdd5e6326",
                  "parentUUID": "9a155072-4ba7-45a8-ae71-33742a51cb43",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "281f1407-64e6-415e-963f-826d7307d11a",
                  "title": "Retrieve tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testEmployee.js",
                  "file": "\\tests\\testEmployee.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not return the deleted material",
                      "fullTitle": "Employee Database deletion Retrieve tests Should not return the deleted material",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "database.company.removeEmployee(emp1);\nassert.equal(database.company.getEmployee(emp1.getId()), undefined, \"The employee is not removed from the database when called for being deleted.\");\ndone();",
                      "err": {},
                      "uuid": "8e51c6de-352c-48e5-935c-a4a007a1cede",
                      "parentUUID": "281f1407-64e6-415e-963f-826d7307d11a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8e51c6de-352c-48e5-935c-a4a007a1cede"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4ef26544-4d6b-4b33-acf8-14e0bb454d5e",
          "title": "Material",
          "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testMaterial.js",
          "file": "\\tests\\testMaterial.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "80e28e8e-334f-42a8-ad6d-5f240b8acaea",
              "title": "Object creation",
              "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testMaterial.js",
              "file": "\\tests\\testMaterial.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "469e9b49-2bb9-46bf-bb0f-d8fa64b0dd1a",
                  "title": "Id tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the material whithout an id specified",
                      "fullTitle": "Material Object creation Id tests Should create the material whithout an id specified",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nassert.equal(typeof mat1.getId(), \"string\", \"The id must be a String (no value given)\");\ndone();",
                      "err": {},
                      "uuid": "d555b91e-73a8-4951-b8e6-fbced7ea9402",
                      "parentUUID": "469e9b49-2bb9-46bf-bb0f-d8fa64b0dd1a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d555b91e-73a8-4951-b8e6-fbced7ea9402"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "9751b123-82e7-4616-b6f0-7811e0b20279",
                  "title": "Title tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not create the material with a missing title",
                      "fullTitle": "Material Object creation Title tests Should not create the material with a missing title",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whithout a title\");\ndone();",
                      "err": {},
                      "uuid": "8c06fce4-b901-4c97-937d-2ce9f3bd5430",
                      "parentUUID": "9751b123-82e7-4616-b6f0-7811e0b20279",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong title value",
                      "fullTitle": "Material Object creation Title tests Should not create the material with a wrong title value",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung_10\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with a non alphanumerical character in the title\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: 48,\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with a non string title\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with an empty title\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \" \",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with an empty title (it contains just a space character)\");\ndone();",
                      "err": {},
                      "uuid": "99438d17-709d-46ab-8f77-48b5eb1d602b",
                      "parentUUID": "9751b123-82e7-4616-b6f0-7811e0b20279",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong size title",
                      "fullTitle": "Material Object creation Title tests Should not create the material with a wrong size title",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"azeazeazeazeazeazeazeazeazeazeaze\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with a too long title\");\ndone();",
                      "err": {},
                      "uuid": "349e174a-0048-445e-bca5-735d37ed40aa",
                      "parentUUID": "9751b123-82e7-4616-b6f0-7811e0b20279",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the material with specified titles",
                      "fullTitle": "Material Object creation Title tests Should create the material with specified titles",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"IOS157\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat2 = new Material({\n\ttitle: \"IPhone3\",\n\tversion: \"IOS157\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nassert.equal(mat1.getTitle(), \"Samsung galaxy s7\", \"The title should be defined (contains spaces)\");\nassert.equal(mat2.getTitle(), \"IPhone3\", \"The title should be defined (no spaces, letters and number)\");\ndone();",
                      "err": {},
                      "uuid": "fa346778-cda1-406d-abc1-50337d49455a",
                      "parentUUID": "9751b123-82e7-4616-b6f0-7811e0b20279",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8c06fce4-b901-4c97-937d-2ce9f3bd5430",
                    "99438d17-709d-46ab-8f77-48b5eb1d602b",
                    "349e174a-0048-445e-bca5-735d37ed40aa",
                    "fa346778-cda1-406d-abc1-50337d49455a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "ee8a1472-fd77-4c77-b677-c6bc9859a536",
                  "title": "Version tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not create the material with a missing version",
                      "fullTitle": "Material Object creation Version tests Should not create the material with a missing version",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whithout a version\");\ndone();",
                      "err": {},
                      "uuid": "dd35b232-304f-4c24-96d4-f2902c210fd4",
                      "parentUUID": "ee8a1472-fd77-4c77-b677-c6bc9859a536",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong version value",
                      "fullTitle": "Material Object creation Version tests Should not create the material with a wrong version value",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\t\t\t\t\tnew Material({\n\t\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\t\tversion: 158,\n\t\t\t\t\t\treference: \"AN001\",\n\t\t\t\t\t\tphoneNumber: \"0685557844\"\n\t\t\t\t\t});\n\t\t\t\t}, Error, \"The material is being created whith a non string version\");\n\t\t\t\tassert.throws(() => {\n\t\t\t\t\tnew Material({\n\t\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\t\tversion: \"\",\n\t\t\t\t\t\treference: \"AN001\",\n\t\t\t\t\t\tphoneNumber: \"0685557844\"\n\t\t\t\t\t});\n\t\t\t\t}, Error, \"The material is being created whith an empty version field\");\n\t\t\t\tassert.throws(() => {\n\t\t\t\t\tnew Material({\n\t\t\t\t\t\ttitle: \"Samsung galaxy s7\",\n\t\t\t\t\t\tversion: \" \",\n\t\t\t\t\t\treference: \"AN001\",\n\t\t\t\t\t\tphoneNumber: \"0685557844\"\n\t\t\t\t\t});\n\t\t\t\t}, Error, \"The material is being created whith an empty version field (just a space)\");\n\t\t\t\tdone();",
                      "err": {},
                      "uuid": "18cbb8ff-07ff-4bf7-9f25-c1d4fa9ede83",
                      "parentUUID": "ee8a1472-fd77-4c77-b677-c6bc9859a536",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong size version",
                      "fullTitle": "Material Object creation Version tests Should not create the material with a wrong size version",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"1\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith an version field too short\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"1 \",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith an version field too short (the spaces musn't be counted)\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"1234567891234567\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith an version field too long\");\ndone();",
                      "err": {},
                      "uuid": "b437316e-7c9a-4903-bfcb-d81a6927f0d6",
                      "parentUUID": "ee8a1472-fd77-4c77-b677-c6bc9859a536",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the material with specified versions",
                      "fullTitle": "Material Object creation Version tests Should create the material with specified versions",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"V 10\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat2 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"IOS157\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat3 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"V1-3\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat4 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"V1.3\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nassert.equal(mat1.getVersion(), \"V 10\", \"The version should be defined (contains a space)\");\nassert.equal(mat2.getVersion(), \"IOS157\", \"The version should be defined (no spaces, letters and numbers)\");\nassert.equal(mat3.getVersion(), \"V1-3\", \"The version should be defined (contains a - )\");\nassert.equal(mat4.getVersion(), \"V1.3\", \"The version should be defined (contains a . )\");\ndone();",
                      "err": {},
                      "uuid": "71c02fc5-ab6e-42c6-9a0f-fd1560c97ceb",
                      "parentUUID": "ee8a1472-fd77-4c77-b677-c6bc9859a536",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dd35b232-304f-4c24-96d4-f2902c210fd4",
                    "18cbb8ff-07ff-4bf7-9f25-c1d4fa9ede83",
                    "b437316e-7c9a-4903-bfcb-d81a6927f0d6",
                    "71c02fc5-ab6e-42c6-9a0f-fd1560c97ceb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a541cd9d-94db-477b-b0b0-fb3d953202cf",
                  "title": "Reference tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not create the material with a missing reference",
                      "fullTitle": "Material Object creation Reference tests Should not create the material with a missing reference",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whithout a reference\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith an empty reference field\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \" \",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith an empty reference field (just a space)\");\ndone();",
                      "err": {},
                      "uuid": "de02bc43-21b6-4e15-80d1-4b111b81237f",
                      "parentUUID": "a541cd9d-94db-477b-b0b0-fb3d953202cf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong reference value",
                      "fullTitle": "Material Object creation Reference tests Should not create the material with a wrong reference value",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: 158,\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a non string reference\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"RT\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a reference not containing any number\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"15715\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a reference not containing any letter\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"RTT15\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a reference containing too much letters at the begenning (more than 2)\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"RT1585\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a reference containing too much numbers at the end (more than 3)\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"ap101\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a reference containing lowercase characters that should be uppercased\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP-15\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a non alphanumerical character in the reference\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"CD005\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a non Apple, Android or XX format\");\ndone();",
                      "err": {},
                      "uuid": "f74e149c-834b-45d8-9520-64de949b829d",
                      "parentUUID": "a541cd9d-94db-477b-b0b0-fb3d953202cf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong size reference",
                      "fullTitle": "Material Object creation Reference tests Should not create the material with a wrong size reference",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP1505\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created whith a too long reference\");\ndone();",
                      "err": {},
                      "uuid": "e63e513d-067c-4c30-9f36-cf132bf08005",
                      "parentUUID": "a541cd9d-94db-477b-b0b0-fb3d953202cf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the material with specified references",
                      "fullTitle": "Material Object creation Reference tests Should create the material with specified references",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Iphone 10\",\n\tversion: \"v24587\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat2 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN014\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat3 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"XX147\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nassert.equal(mat1.getReference(), \"AP150\", \"The reference should be defined (this is a two letters, 3 numbers format reference with an Apple format)\");\nassert.equal(mat2.getReference(), \"AN014\", \"The reference should be defined (this is a two letters, 3 numbers format reference with an Android format)\");\nassert.equal(mat3.getReference(), \"XX147\", \"The reference should be defined (this is a two letters, 3 numbers format reference with an non Android or Apple format)\");\ndone();",
                      "err": {},
                      "uuid": "2b4094fb-b7f7-4f9e-9ca4-7d24a7dfd1f9",
                      "parentUUID": "a541cd9d-94db-477b-b0b0-fb3d953202cf",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "de02bc43-21b6-4e15-80d1-4b111b81237f",
                    "f74e149c-834b-45d8-9520-64de949b829d",
                    "e63e513d-067c-4c30-9f36-cf132bf08005",
                    "2b4094fb-b7f7-4f9e-9ca4-7d24a7dfd1f9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0e2f8b9b-d08a-41a5-a6cb-b3a8b167670c",
                  "title": "Picture tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the material whith a missing picture",
                      "fullTitle": "Material Object creation Picture tests Should create the material whith a missing picture",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AP150\",\n\tphoneNumber: \"0685557844\"\n});\nassert.equal(mat1.getPicture(), undefined, \"The picture should be undefined (no value given)\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP150\",\n\t\tpicture: \"\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP150\",\n\t\tpicture: \" \",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with an empty string picture link\");\ndone();",
                      "err": {},
                      "uuid": "095642fc-6798-4e10-875f-ab8611ff30f6",
                      "parentUUID": "0e2f8b9b-d08a-41a5-a6cb-b3a8b167670c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong extension picture",
                      "fullTitle": "Material Object creation Picture tests Should not create the material with a wrong extension picture",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP150\",\n\t\tpicture: 158,\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with a non string picture\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP150\",\n\t\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.svg\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with a non png/jpg picture\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AP150\",\n\t\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault\",\n\t\tphoneNumber: \"0685557844\"\n\t});\n}, Error, \"The material is being created with a non extension picture\");\ndone();",
                      "err": {},
                      "uuid": "aea7177b-2534-4202-a3ec-f059200a84a5",
                      "parentUUID": "0e2f8b9b-d08a-41a5-a6cb-b3a8b167670c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the material with specified pictures",
                      "fullTitle": "Material Object creation Picture tests Should create the material with specified pictures",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\",\n\tphoneNumber: \"0685557844\"\n});\nconst mat2 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AP150\",\n\tpicture: \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.jpg\",\n\tphoneNumber: \"0685557844\"\n});\nassert.equal(mat1.getPicture(), \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.png\", \"The picture should be defined (this is a .png picture)\");\nassert.equal(mat2.getPicture(), \"https://i.ytimg.com/vi/9XgYGNSXkLk/maxresdefault.jpg\", \"The picture should be defined (this is a .jpg picture)\");\ndone();",
                      "err": {},
                      "uuid": "c4f3639c-b3ca-4dae-b7f4-c646fd462f9e",
                      "parentUUID": "0e2f8b9b-d08a-41a5-a6cb-b3a8b167670c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "095642fc-6798-4e10-875f-ab8611ff30f6",
                    "aea7177b-2534-4202-a3ec-f059200a84a5",
                    "c4f3639c-b3ca-4dae-b7f4-c646fd462f9e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b1c3bb4f-a97e-4376-bd26-cd492abacebb",
                  "title": "Phone number tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the material whithout a phone number",
                      "fullTitle": "Material Object creation Phone number tests Should create the material whithout a phone number",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nassert.equal(mat1.getPhoneNumber(), undefined, \"The phone number should be undefined (no value given)\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"\"\n\t});\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \" \"\n\t});\n}, Error, \"The material is being created with an empty phone number field\");\ndone();",
                      "err": {},
                      "uuid": "047799bc-556f-4e3d-ac52-1c4ace659b21",
                      "parentUUID": "b1c3bb4f-a97e-4376-bd26-cd492abacebb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong size phone number",
                      "fullTitle": "Material Object creation Phone number tests Should not create the material with a wrong size phone number",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"068555784414\"\n\t});\n}, Error, \"The material is being created with a too long phone number\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"068555\"\n\t});\n}, Error, \"The material is being created with a too short phone number\");\ndone();",
                      "err": {},
                      "uuid": "add6aae5-d515-4202-a2f8-8c46214d64b5",
                      "parentUUID": "b1c3bb4f-a97e-4376-bd26-cd492abacebb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not create the material with a wrong phone number value",
                      "fullTitle": "Material Object creation Phone number tests Should not create the material with a wrong phone number value",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"azeazeazee\"\n\t});\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: \"06855-7844\"\n\t});\n}, Error, \"The material is being created with a phone number containing non numerical characters\");\nassert.throws(() => {\n\tnew Material({\n\t\ttitle: \"Samsung galaxy s7\",\n\t\tversion: \"v24587\",\n\t\treference: \"AN001\",\n\t\tphoneNumber: 1587485\n\t});\n}, Error, \"The material is being created with a non string phone number\");\ndone();",
                      "err": {},
                      "uuid": "dd1681a8-79d0-4add-a937-a1d325660103",
                      "parentUUID": "b1c3bb4f-a97e-4376-bd26-cd492abacebb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create the material with the specified phone numbers",
                      "fullTitle": "Material Object creation Phone number tests Should create the material with the specified phone numbers",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\",\n\tphoneNumber: \"0685557844\"\n});\nassert.equal(mat1.getPhoneNumber(), \"0685557844\", \"The phone number should be defined\");\ndone();",
                      "err": {},
                      "uuid": "d2f7a57a-dbbd-45c7-9aaa-4452b9fcc0a4",
                      "parentUUID": "b1c3bb4f-a97e-4376-bd26-cd492abacebb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "047799bc-556f-4e3d-ac52-1c4ace659b21",
                    "add6aae5-d515-4202-a2f8-8c46214d64b5",
                    "dd1681a8-79d0-4add-a937-a1d325660103",
                    "d2f7a57a-dbbd-45c7-9aaa-4452b9fcc0a4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f750a92c-e3fd-4629-9930-54a4850ecd0e",
              "title": "Database insertion",
              "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testMaterial.js",
              "file": "\\tests\\testMaterial.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Database insertion\"",
                  "fullTitle": "Material Database insertion \"before all\" hook in \"Database insertion\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "database.company.addMaterial(testMaterial)",
                  "err": {},
                  "uuid": "3a93283b-fbe9-4b2e-95c1-e858aaff9665",
                  "parentUUID": "f750a92c-e3fd-4629-9930-54a4850ecd0e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "59e63bef-a683-40d7-95de-0f86d5797fd6",
                  "title": "Retrieve tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should return the material added",
                      "fullTitle": "Material Database insertion Retrieve tests Should return the material added",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const retrievedMaterial = database.company.getMaterial(testMaterial.getId());\nassert.equal(retrievedMaterial, testMaterial, \"An added material is not returned by the getter\");\ndone();",
                      "err": {},
                      "uuid": "aadf67fd-df89-4dff-bbaf-c461acd947d5",
                      "parentUUID": "59e63bef-a683-40d7-95de-0f86d5797fd6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "aadf67fd-df89-4dff-bbaf-c461acd947d5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "7ed140aa-c6c9-4086-bdf9-7d7aa3ef18d2",
                  "title": "Unicity tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not add a material already in the database",
                      "fullTitle": "Material Database insertion Unicity tests Should not add a material already in the database",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Exact same object (same id)\nassert.throws(() => {\n\tdatabase.company.addMaterial(testMaterial);\n}, Error, \"A same material is being added several times in the database\");\n// Same reference but different id\nassert.throws(() => {\n\tconst sameReferenceDifferentId = new Material(testMaterial);\n\tdatabase.company.addMaterial(sameReferenceDifferentId);\n}, Error, \"A material is being added in the database with an already added material id\");\nassert.throws(() => {\n\tconst referenceCopy = new Material({\n\t\ttitle: \"Samsung Galaxy fold\",\n\t\tversion: \"v24587\",\n\t\treference: testMaterial.getReference(),\n\t\tphoneNumber: \"0685557844\"\n\t});\n\tdatabase.company.addMaterial(referenceCopy);\n}, Error, \"A material with an already used reference is being added to the company\");\ndone();",
                      "err": {},
                      "uuid": "5e40db80-ec0e-4c53-b1b9-f6cf07a4a71d",
                      "parentUUID": "7ed140aa-c6c9-4086-bdf9-7d7aa3ef18d2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5e40db80-ec0e-4c53-b1b9-f6cf07a4a71d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e13d5009-0820-4d00-a2d2-d6ea11290958",
              "title": "Database deletion",
              "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testMaterial.js",
              "file": "\\tests\\testMaterial.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Database deletion\"",
                  "fullTitle": "Material Database deletion \"before all\" hook in \"Database deletion\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "database.company.addMaterial(testMaterial)",
                  "err": {},
                  "uuid": "382595f8-4f81-48d8-aa68-321fa3ba86ea",
                  "parentUUID": "e13d5009-0820-4d00-a2d2-d6ea11290958",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "5afaf2e4-f795-44f4-85aa-2f435620c75a",
                  "title": "Retrieve tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testMaterial.js",
                  "file": "\\tests\\testMaterial.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not return the deleted material",
                      "fullTitle": "Material Database deletion Retrieve tests Should not return the deleted material",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "database.company.removeMaterial(testMaterial);\nassert.equal(database.company.getMaterial(testMaterial.getId()), undefined, \"The material is not removed from the database when called for being deleted.\");\ndone();",
                      "err": {},
                      "uuid": "5790a007-b2a5-4cb8-9475-ec5200b5fc14",
                      "parentUUID": "5afaf2e4-f795-44f4-85aa-2f435620c75a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5790a007-b2a5-4cb8-9475-ec5200b5fc14"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8e9deab9-0e78-42c7-b56b-682bceb7da15",
          "title": "Rental",
          "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testRental.js",
          "file": "\\tests\\testRental.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dd0dac54-a89f-42f8-9aa4-98f6f0f32525",
              "title": "Object creation",
              "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testRental.js",
              "file": "\\tests\\testRental.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "609c686d-c404-440b-8a84-0e5ef3e773ae",
                  "title": "Id tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testRental.js",
                  "file": "\\tests\\testRental.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create the rental without having to enter an id",
                      "fullTitle": "Rental Object creation Id tests Should create the rental without having to enter an id",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nconst emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nconst rent1 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: new Date(\"2023-02-01\"),\n\tendingDate: new Date(\"2023-03-01\")\n});\nassert.equal(typeof rent1.getId(), \"string\", \"The id must be a String.\");\ndone();",
                      "err": {},
                      "uuid": "aed8bedf-5b16-40ea-9929-f356e172fd14",
                      "parentUUID": "609c686d-c404-440b-8a84-0e5ef3e773ae",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "aed8bedf-5b16-40ea-9929-f356e172fd14"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "ec158e0f-f044-45ea-bb3e-b0916df55108",
                  "title": "Begin & ending date tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testRental.js",
                  "file": "\\tests\\testRental.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should create a rental with valid dates values",
                      "fullTitle": "Rental Object creation Begin & ending date tests Should create a rental with valid dates values",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nconst emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nconst rent1 = new Rental({\n\temployee: emp1,\n\tmaterial: mat1,\n\tstartingDate: new Date(\"2025-02-01\"),\n\tendingDate: new Date(\"2025-03-01\")\n});\nassert.equal(typeof rent1.getStartingDate(), \"object\", \"The starting date must be of type date.\");\nassert.equal(typeof rent1.getEndingDate(), \"object\", \"The ending date must be of type date.\");\ndone();",
                      "err": {},
                      "uuid": "768e61a6-dbba-4259-aeb3-768c23a9b6c9",
                      "parentUUID": "ec158e0f-f044-45ea-bb3e-b0916df55108",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should create a rental with valid dates values",
                      "fullTitle": "Rental Object creation Begin & ending date tests Should create a rental with valid dates values",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mat1 = new Material({\n\ttitle: \"Samsung galaxy s7\",\n\tversion: \"v24587\",\n\treference: \"AN001\"\n});\nconst emp1 = new Employee({\n\tname: \"Nicolas\",\n\tsurname: \"Martin\",\n\temail: \"nicolas.martin@mail.com\",\n\tpassword: \"Azertyuiop1234\",\n\tpersonnalNumber: \"ABCD123\"\n});\nassert.throws(() => {\n\tnew Rental({\n\t\temployee: emp1,\n\t\tmaterial: mat1,\n\t\tstartingDate: new Date(\"2025-02-01\"),\n\t\tendingDate: new Date(\"2024-03-01\")\n\t});\n}, Error, \"The rental is being created with ending date before a the begin date\");\nassert.throws(() => {\n\tnew Rental({\n\t\temployee: emp1,\n\t\tmaterial: mat1,\n\t\tstartingDate: new Date(\"2020-02-01\"),\n\t\tendingDate: new Date(\"2024-03-01\")\n\t});\n}, Error, \"The rental is being created with starting date before today's date\");\ndone();",
                      "err": {},
                      "uuid": "3120c205-2ddf-4805-9a8a-482d1e7b6709",
                      "parentUUID": "ec158e0f-f044-45ea-bb3e-b0916df55108",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "768e61a6-dbba-4259-aeb3-768c23a9b6c9",
                    "3120c205-2ddf-4805-9a8a-482d1e7b6709"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0986585-6f90-49b4-877e-25916c396dea",
              "title": "Database insertion",
              "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testRental.js",
              "file": "\\tests\\testRental.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Database insertion\"",
                  "fullTitle": "Rental Database insertion \"before all\" hook in \"Database insertion\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "database.company.addRental(rent1)",
                  "err": {},
                  "uuid": "6b18bc56-7270-430e-8aed-cb5847451ca3",
                  "parentUUID": "f0986585-6f90-49b4-877e-25916c396dea",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "39ec8f4b-cf02-41ec-95be-f89fa8afa801",
                  "title": "Retrieve tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testRental.js",
                  "file": "\\tests\\testRental.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should return the rental added",
                      "fullTitle": "Rental Database insertion Retrieve tests Should return the rental added",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const retrievedRental = database.company.getRentals(rent1.getId());\nassert.equal(database.company.getRental(rent1.getId()), rent1, \"An added rental is returned by the getter\");\ndone();",
                      "err": {},
                      "uuid": "8fa47a91-7308-4d4d-83f3-9e12e21d1eea",
                      "parentUUID": "39ec8f4b-cf02-41ec-95be-f89fa8afa801",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8fa47a91-7308-4d4d-83f3-9e12e21d1eea"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "6e78279d-d053-427d-bb03-7a831e84441d",
                  "title": "Unicity tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testRental.js",
                  "file": "\\tests\\testRental.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not add a rental already in the database",
                      "fullTitle": "Rental Database insertion Unicity tests Should not add a rental already in the database",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Exact same object (same id)\nassert.throws(() => {\n\tdatabase.company.addRental(emp1);\n}, Error, \"A same rental is being added several times in the database\");\n// Same reference but different id\nassert.throws(() => {\n\tconst sameReferenceDifferentId = new Rental(rent1);\n\tdatabase.company.addRental(sameReferenceDifferentId);\n}, Error, \"A rental is being added in the database with an already added rental id\");\ndone();",
                      "err": {},
                      "uuid": "de926a31-2cb9-4f77-ab07-781dba81fdb7",
                      "parentUUID": "6e78279d-d053-427d-bb03-7a831e84441d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "de926a31-2cb9-4f77-ab07-781dba81fdb7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "118636ed-1a6f-41d4-8545-a2c57b96aecc",
              "title": "Database deletion",
              "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testRental.js",
              "file": "\\tests\\testRental.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "af5e66e0-cb7e-4efd-ad0e-a7c89f138cdf",
                  "title": "Retrieve tests",
                  "fullFile": "C:\\Users\\chloe\\JavaEE-eclipse-workspace\\GenieLogAppLoc\\tests\\testRental.js",
                  "file": "\\tests\\testRental.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not return the deleted rental",
                      "fullTitle": "Rental Database deletion Retrieve tests Should not return the deleted rental",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "database.company.removeRental(rent1);\nassert.equal(database.company.getRental(rent1.getId()), undefined, \"The rental is not removed from the database when called for being deleted.\");\ndone();",
                      "err": {},
                      "uuid": "250c67a1-1770-484f-b06c-7fb9e08da64b",
                      "parentUUID": "af5e66e0-cb7e-4efd-ad0e-a7c89f138cdf",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "250c67a1-1770-484f-b06c-7fb9e08da64b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "tests/report",
        "reportFilename": "report"
      },
      "version": "6.2.0"
    }
  }
}